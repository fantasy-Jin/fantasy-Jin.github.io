<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FのBlog</title>
  
  <subtitle>Fantasyの博客</subtitle>
  <link href="http://fantasy06.github.io/atom.xml" rel="self"/>
  
  <link href="http://fantasy06.github.io/"/>
  <updated>2022-08-06T06:49:04.225Z</updated>
  <id>http://fantasy06.github.io/</id>
  
  <author>
    <name>Fantasy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html and css</title>
    <link href="http://fantasy06.github.io/posts/28784acc.html"/>
    <id>http://fantasy06.github.io/posts/28784acc.html</id>
    <published>2022-08-06T04:31:45.000Z</published>
    <updated>2022-08-06T06:49:04.225Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML初级"><a href="#HTML初级" class="headerlink" title="HTML初级"></a>HTML初级</h1><p>整体结构</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--开始标签--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--字符编码避免网页文字乱码--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>网页的标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--网页的基本内容--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--结束标签--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初级标签"><a href="#初级标签" class="headerlink" title="初级标签"></a>初级标签</h2><ol><li><p>标题标签</p><blockquote><p>H1，H2，….，H6。（1–&gt;6）大标题–&gt;小标题，成对出现，开始标签  <code>&lt;H1&gt;</code> ，一个结束标签  <code>&lt;/H1&gt;</code> 。</p></blockquote></li><li><p>段落标题</p><blockquote><p>段落是通过  <code>&lt;p&gt; </code> 标签进行定义的，成对出现，开始标签   <code> &lt;p&gt;</code>  ，一个结束标签  <code>&lt;/p&gt;</code> 。</p></blockquote></li><li><p>文字标签</p><blockquote><p><code>&lt;strong&gt;&lt;/strong&gt;</code>，加粗文字标签；<code>&lt;em&gt;&lt;/em&gt;</code>  斜体文字标签，可嵌套</p></blockquote></li><li><p>符号标签</p><blockquote><p><code>&lt;del&gt;&lt;/del&gt;</code>，在文字上添加删除线，如：<del>文字</del></p></blockquote></li></ol><h2 id="高级标签"><a href="#高级标签" class="headerlink" title="高级标签"></a>高级标签</h2><ol><li><p><strong>块状标签</strong></p><blockquote><p><code>&lt;div&gt;&lt;/div&gt;</code> ,每一个div占满一整行。  <code>&lt;span&gt;&lt;/span&gt;</code>，文本信息在一行展示</p></blockquote></li><li><p><strong>空格和换行，尖括号</strong></p><blockquote><p><code>&lt;br&gt;</code>  换行标签，<code>&amp;nbsp;</code> 空格符号，<code>&amp;lt </code>左尖括号，<code>&amp;gt;</code> 右尖括号</p></blockquote></li><li><p><strong>有序列表标签</strong></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--网页显示--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>第一条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--1.第一--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>第二条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--2.第二--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>第三条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--3.第三--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>&lt;ol&gt;</code> 可以增加属性，type，换排序符号；</p><p>如 <code>&lt;ol type="A"&gt;</code> ，就从A，B顺序排列；符号可以换 <code>A,a,1,i I</code> ，不填默认数值<code>1</code>；</p><p>倒叙 <code>&lt;ol reversed="reversed"&gt;</code> ；</p><p><code>&lt;ol start="数值"&gt;</code>，更换开始符号的数值；</p></blockquote></li><li><p><strong>无序列表标签</strong></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>  &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>第一条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>第二条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>第三条<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>默认每一段文本前面显示小圆点</p><p>属性：<code>&lt;ul type=disc&gt;</code> 默认值实心小圆点，<code>circle </code> 空心小圆点，<code>square</code> 小方块</p></blockquote></li><li><p><strong>图片插入</strong></p><blockquote><p><code>&lt;img src="图片路径"&gt;</code></p><p>包括：</p><p>1，网上url；</p><p>2，本地的绝对路径(同一个文件夹下，直接写图片文件名)；</p><p>3，本地的相对路径(不同一个文件夹下，写完整图片路径)；</p><p>属性：</p><p>1，<code>&lt;img src="图片路径" alt="图片占位符"&gt;</code>，即图没有加载出来时显示</p><p>2，<code>&lt;img src="图片路径" title=”图片提示符“&gt;</code>，即鼠标移到图时显示</p></blockquote></li><li><p><strong>链接标签a</strong></p><blockquote><ol><li>超链接：<code>&lt;a href="网址"&gt;网站名&lt;/a&gt;</code></li><li>锚点：<code>&lt;a href="#id"&gt;文字&lt;/a&gt;</code>；id指某个标签的id名字，运用于：页面目录，回到顶部</li><li>打电话或发邮件：<code>&lt;a href="tel:电话号码"&gt;文字&lt;/a&gt;</code>；<code>&lt;a href="mailto:邮箱地址"&gt;文字&lt;/a&gt;</code></li><li>协议限定符：使用js</li></ol><p>属性：<code>target=_blank </code> 点击链接在新页面弹出</p></blockquote></li><li><p><strong>表单</strong></p><ul><li><p>信息输入框</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--action：发送出去的地址--&gt;</span>name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!--文本输入框，name：数值内容--&gt;</span>password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token comment">&lt;!--密码输入框，name：数值内容--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--提交按键，value：数据值--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>单选框</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>get<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span> <span class="token comment">&lt;!--action：发送出去的地址--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> 选择其中一个 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>1.第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">value:</span>"one"</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--name相同表示同个选择问题--&gt;</span>1.第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">value:</span>"two"</span><span class="token punctuation">&gt;</span></span>1.第三个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">value:</span>"three"</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--提交按键，value：数据值--&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>副选框</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkobx<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>题目<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">value:</span>"提交的数值"</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--大致与上面相同--&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li><li><p>选项下拉菜单</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">&gt;</span></span>选项二<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>表单添加默认选项：标签后加入 <code>checked="checked"</code></p></blockquote></li></ul></li></ol><hr><h1 id="CSS初级"><a href="#CSS初级" class="headerlink" title="CSS初级"></a>CSS初级</h1><h2 id="引入CSS"><a href="#引入CSS" class="headerlink" title="引入CSS"></a>引入CSS</h2><ol><li><p>行间样式</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">css定义内容</span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p>页面级CSS</p><blockquote><p>在头部标签  <code>&lt;head&gt;</code>  下加入</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"> &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">&lt;!--css定义内容--&gt; &gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>外部CSS文件</p><blockquote><p>   新加一个文件后缀为.CSS</p><p>   在头部标签  <code>&lt;head&gt;</code>  下加入</p>   <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>CSS文件位置<span class="token punctuation">"</span></span><span class="token punctuation">/&gt;</span></span>\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote></li></ol><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a><strong>CSS选择器</strong></h2><ol><li><p><code>id</code>，在div标签加入id名</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token comment">&lt;!--id创建--&gt;</span>&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>填id名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>&gt;#id名{   "css定义内容"   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="2"><li><p><code>class</code>，在div标签加入class名</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token comment">&lt;!--class创建--&gt;</span>&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>填calss名<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>&gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>&gt;#id名{  "css定义内容"   }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="3"><li><p><code>标签选择</code></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>&gt;标签名{   "css定义内容"  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="4"><li><p><code>属性</code>，如[id]，[class]，[id=”123”]…</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>&gt;[属性]{  "css定义内容"  }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="5"><li><p><code>通配符</code>，对所以标签都生效</p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">&gt;<span class="token comment">&lt;!--css定义,引入css页面填写--&gt;</span>&gt;*{ "css定义内容" }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote></li><li><p><code>父子选择器/派生选择器</code></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--对 1 进行css定义--&gt;</span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>   &gt;div span{"css定义内容"   &gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="7"><li><p><code>直接子元素选择器</code></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!--对 1 进行css定义--&gt;</span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>   &gt;div &gt; span{"css定义内容"   &gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="8"><li><p><code>并列选择器</code></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token comment">&lt;!--对 2 进行css定义--&gt;</span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">calss</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> 3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>   &gt;div.demo{"css定义内容"   &gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="9"><li><p><code>分组选择器</code></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">   &gt;<span class="token comment">&lt;!--对 1,2,3 进行css定义--&gt;</span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span> 1 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span> 2 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span> 3 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>   &gt;em,strong,span{"css定义内容"   &gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="10"><li><p><code>伪类选择器</code></p><blockquote><pre class="line-numbers language-html" data-language="html"><code class="language-html">   &gt;<span class="token comment">&lt;!--将鼠标悬浮在改标签时的变化，css定义--&gt;</span>   &gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>链接地址<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>链接文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>   &gt;<span class="token comment">&lt;!--下面css定义,引入css页面填写--&gt;</span>   &gt;a:hover{"css定义内容"   &gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><h2 id="CSS选择器的优先级"><a href="#CSS选择器的优先级" class="headerlink" title="CSS选择器的优先级"></a><strong>CSS选择器的优先级</strong></h2><ul><li><blockquote><p><code>!import </code>&gt; <code>行间样式</code> &gt; <code>id</code> &gt; <code>class</code> =<code>属性</code> &gt; <code>标签选择</code> &gt; <code>通配符</code></p><p><code>!import</code>  在CSS定义内容后可加上</p><p>优先级是根据各个选择器的<code>权重大小</code>比较的</p><table><thead><tr><th align="center">选择器</th><th align="center">权重</th></tr></thead><tbody><tr><td align="center">!import</td><td align="center">Infinity (无穷大)</td></tr><tr><td align="center">行间样式</td><td align="center">1000</td></tr><tr><td align="center">id</td><td align="center">100</td></tr><tr><td align="center">class | 属性 | 伪类</td><td align="center">10</td></tr><tr><td align="center">标签 | 伪元素</td><td align="center">1</td></tr><tr><td align="center">通配符</td><td align="center">0</td></tr></tbody></table><p><code>注</code>：权重之间是256进制</p></blockquote></li></ul><h2 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h2><ol><li><p>基本样式</p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span>     属性名1：属性值1<span class="token punctuation">;</span>     属性名2：属性值2<span class="token punctuation">;</span>     属性名3：属性值3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*例如定义一个div*/</span><span class="token selector">div</span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span>100px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>文字定义</p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css">&gt;<span class="token property">font-size</span><span class="token punctuation">:</span>16px<span class="token punctuation">;</span>     <span class="token comment">/* 调整文字大小 */</span>&gt;<span class="token property">font-weight</span><span class="token punctuation">:</span>bold<span class="token punctuation">;</span><span class="token comment">/* 调整文字粗细  可选属性，默认是 "normal"，"bold" 是加粗，可直接写数值: "100-900" 之间。*/</span>&gt;<span class="token property">font-style</span><span class="token punctuation">:</span>normal<span class="token punctuation">;</span><span class="token comment">/* 属性值："italic" 斜体的字体样式, "oblique" 倾斜的字体样式*/</span>&gt;<span class="token property">font-family</span><span class="token punctuation">:</span>字体名称<span class="token punctuation">;</span><span class="token comment">/* 可以修改显示的字体  */</span>&gt;<span class="token comment">/*字体颜色定义，三种方法*/</span>&gt;<span class="token property">color</span><span class="token punctuation">:</span><span class="token function">rgb</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span>0<span class="token punctuation">,</span>0<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* 红，绿，蓝 三个颜色的值 0-255*/</span>&gt;<span class="token property">color</span><span class="token punctuation">:</span>#000000<span class="token punctuation">;</span><span class="token comment">/* 可以分开00-00-00，代表红，绿，蓝的值，用16进制数表示  */</span>&gt;<span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token comment">/*直接所以英文颜色名字*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li></ol><ol start="3"><li><p>段落文字定义</p><blockquote><pre class="line-numbers language-css" data-language="css"><code class="language-css">&gt;<span class="token comment">/* 段落文字水平居中 */</span>&gt;<span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span><span class="token comment">/* 可以选属性，靠左 "left"，靠右："right" */</span>&gt;<span class="token property">line-height</span><span class="token punctuation">:</span>10px<span class="token punctuation">;</span><span class="token comment">/* 行高，行间距 */</span>&gt;<span class="token property">text-indent</span><span class="token punctuation">:</span>2em<span class="token punctuation">;</span><span class="token comment">/* 首行缩进两个字符大小；1 em= 1 font-size   */</span>&gt;<span class="token property">text-decoration</span><span class="token punctuation">:</span>line-through<span class="token punctuation">;</span><span class="token comment">/* 删除线 */</span>&gt;<span class="token property">text-decoration</span><span class="token punctuation">:</span>underline<span class="token punctuation">;</span><span class="token comment">/* 下划线 */</span>&gt;<span class="token property">text-decoration</span><span class="token punctuation">:</span>overline<span class="token punctuation">;</span><span class="token comment">/* 上划线 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p>边框</p><blockquote><p>borde(边框)</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* 边框宽度 | 边框样式 | 边框颜色 */</span><span class="token property">border</span><span class="token punctuation">:</span>1px dashed green<span class="token punctuation">;</span><span class="token comment">/* "dashed" 虚线；"solid" 实线 */</span><span class="token comment">/*可以分开4个边角定义*/</span><span class="token comment">/* 例如左边left,可选 tiop，right，bottom */</span><span class="token property">border-left</span><span class="token punctuation">:</span>1px dashed green<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>margin(外边距)</code>    <code>padding（填充）</code></p><p>margin/padding:1px ，margin/padding:30%；</p><p>对应四个上，下，左，右位置大小的值</p><p>可拆开， margin/padding-top，依此类推</p></blockquote></li></ol><h2 id="元素的类型"><a href="#元素的类型" class="headerlink" title="元素的类型"></a>元素的类型</h2><p>每一个元素都有默认的 <code>display</code> 属性值；</p><ul><li><p><strong>行类元素</strong></p><blockquote><p>特点：内容决定元素所占位置，不可以通过css改变宽高</p><p>行内元素标签：<code>span</code>    <code>strong</code>    <code>a</code>    <code>em</code>    <code>del</code></p><p>CSS默认：<code>display: inline;</code></p><p>凡是带有 inline 的元素，都有文字特征</p></blockquote></li><li><p><strong>块类元素</strong></p><blockquote><p>特点：独占一行，可以通过css改变宽高</p><p>块内元素标签：<code>div</code>   <code>p</code>   <code>ul</code>   <code>li</code>   <code>ol</code>  <code>form</code>  <code>address</code></p><p>CSS默认：<code>disply: block;</code></p></blockquote></li><li><p><strong>行级块元素</strong></p><blockquote><p>特点：内容决定改变大小，可以通过css改变宽高</p><p>行级块元素标签：<code>img</code></p><p>CSS默认：<code>disply: inline-block;</code></p></blockquote></li></ul><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul><li><p>内容</p><blockquote><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距（margin），边框（border），填充（padding），和实际内容（content）。</p><p>盒模型允许我们在其它元素和周围元素边框之间的空间放置元素。</p></blockquote></li><li><p>结构图</p><blockquote><img src="https://www.runoob.com/images/box-model.gif" style="zoom: 150%;"></blockquote></li><li><p>说明</p><blockquote><ul><li><strong>Margin(外边距)</strong> - 清除边框外的区域，外边距是透明的。</li><li><strong>Border(边框)</strong> - 围绕在内边距和内容外的边框。</li><li><strong>Padding(内边距)</strong> - 清除内容周围的区域，内边距是透明的。</li><li><strong>Content(内容)</strong> - 盒子的内容，显示文本和图像</li></ul></blockquote></li><li><p>宽度和高度的计算</p><blockquote><p>总元素的宽度=宽度+左填充+右填充+左边框+右边框+左边距+右边距;</p><p>总元素的高度=高度+顶部填充+底部填充+上边框+下边框+上边距+下边距</p></blockquote></li></ul><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="absolute-定位"><a href="#absolute-定位" class="headerlink" title="absolute 定位"></a>absolute 定位</h3><blockquote><p>脱离原来位置进行定位</p><p>位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那么它的位置相对于<code>&lt;html&gt;</code>；</p><p>absolute 定位使元素的位置与文档流无关，因此不占据空间</p></blockquote><h3 id="relative-定位"><a href="#relative-定位" class="headerlink" title="relative 定位"></a>relative 定位</h3><blockquote><p>保留原来的位置进行定位</p><p>相对自己原来的位置进行定位</p><p>元素虽然偏移某个距离，但仍然占据原来的空间</p></blockquote><h3 id="fixed-定位"><a href="#fixed-定位" class="headerlink" title="fixed 定位"></a>fixed 定位</h3><blockquote><p>元素的位置相对于浏览器窗口是固定位置。</p><p>即使窗口是滚动的它也不会移动</p></blockquote><h3 id="CSS定位属性"><a href="#CSS定位属性" class="headerlink" title="CSS定位属性"></a>CSS定位属性</h3><blockquote><p><code>top</code>    <code>bottom</code>    <code>left</code>    <code>right</code></p><p>分别对应上，下，左，右位置的值，可用数值 与百分比  top:1px ，top:30%；</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    
    <category term="笔记" scheme="http://fantasy06.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="基础" scheme="http://fantasy06.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>WebAPI的基本学习</title>
    <link href="http://fantasy06.github.io/posts/6ec968d6.html"/>
    <id>http://fantasy06.github.io/posts/6ec968d6.html</id>
    <published>2022-08-05T06:34:02.000Z</published>
    <updated>2022-08-06T06:55:17.120Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="webAPI的基本学习"><a href="#webAPI的基本学习" class="headerlink" title="webAPI的基本学习"></a>webAPI的基本学习</h2><ul><li><p>作用：使用JS操作html和浏览器</p></li><li><p>分类：DOM（文档对象模型）、BOM（浏览器对象模型）</p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220626113415737.png" alt="image-20220626113415737" style="zoom:80%;"></li></ul><h3 id="DOM的内容"><a href="#DOM的内容" class="headerlink" title="DOM的内容"></a>DOM的内容</h3><ul><li>DOM（Document Object Model——文档对象模型）是用来呈现以及与任意 HTML 或 XML文档交互的API</li><li>简单来说：DOM是浏览器提供的一套专门用来 操作网页内容 的功能</li><li>作用：开发网页内容特效和实现用户交互</li></ul><h3 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h3><ul><li><p>内容：将HTML以树状的内容直观显示出来，也称文档树</p></li><li><p>作用：直观体现出标签与标签的关系</p></li><li><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt;    &lt;meta charset="UTF-8"&gt;    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt;    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;    &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    文本    &lt;a href=""&gt;链接&lt;/a&gt;    &lt;h1 class="" id=""&gt;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;<pre class="line-numbers language-none"><code class="language-none">  &lt;img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/0d429a429c4b10f6ba024de35a73da88b39e4b6e76b0f7bd95697db1ceaab0b5.gif" alt="0d429a429c4b10f6ba024de35a73da88b39e4b6e76b0f7bd95697db1ceaab0b5" style="zoom:200%;" /&gt;### 获取DOM元素- CSS选择器 匹配到第一个元素，返回一个HTMLElement对象  ```javascript  //语法  document.querySelector('CSS选择器')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li><li><p>匹配多个选择器，返回NodeList对象集合，得到是一个伪数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'CSS选择器'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>其他方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementByid</span><span class="token punctuation">(</span><span class="token string">'id名'</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementByTagName</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementByClassName</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="设置和修改DOM元素"><a href="#设置和修改DOM元素" class="headerlink" title="设置和修改DOM元素"></a>设置和修改DOM元素</h3><ul><li><p>修改标签文本内容</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//语法：</span>元素<span class="token punctuation">.</span>innerText<span class="token operator">=</span><span class="token string">''</span> <span class="token comment">//只能识别内容，不能解释标签</span><span class="token comment">//可以解析标签 即：</span>元素<span class="token punctuation">.</span>innerHTML<span class="token operator">=</span><span class="token string">'&lt;h3&gt;会对html标签进行解析&lt;/h3&gt;'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="设置与修改DOM元素的属性"><a href="#设置与修改DOM元素的属性" class="headerlink" title="设置与修改DOM元素的属性"></a>设置与修改DOM元素的属性</h3><ul><li><p>语法：<code>对象.属性=值</code>，最常见的属性比如： <strong>href</strong>、<strong>title</strong>、<strong>src</strong> 等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//例子</span><span class="token keyword">let</span> pic <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>src<span class="token operator">=</span><span class="token string">'./images/pic2.jpg'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>通过<strong>style</strong>修改CSS属性 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> box <span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width<span class="token operator">=</span><span class="token string">'300px'</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>paddingLeft <span class="token operator">=</span><span class="token string">'300px'</span><span class="token comment">//注：有链接-符号的需要转换为小驼峰命名法</span><span class="token comment">//即：padding-left--&gt;paddingLeft</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改标签类名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span>clssName<span class="token operator">=</span><span class="token string">'新类名'</span><span class="token comment">//注：直接使用 className 赋值会覆盖以前的类名</span><span class="token comment">//保留可写</span>元素<span class="token punctuation">.</span>clssName<span class="token operator">=</span><span class="token string">'旧类名 新类名'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过<strong>clssList</strong>操作css类名</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//增加一个类名</span>元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token comment">//删除一个类</span>元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span class="token comment">//切换一个类,存在就删除,不存在就增加</span>元素<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">'类名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="修改表单属性"><a href="#修改表单属性" class="headerlink" title="修改表单属性"></a>修改表单属性</h3><ul><li><p>作用：表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</p></li><li><p>获取：DOM对象.属性名；设置：DOM对象.属性名=新值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">表单<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token string">'用户名'</span>表单<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">'password'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>表单属性中添加就有效果,移除就没有效果,一律使用布尔值表示 如果为true 代表添加了该属性 如果是false 代表移除了该属性<br>比如： disabled、checked、selected</p></li></ul><h3 id="定时器-setInterval-间歇函数"><a href="#定时器-setInterval-间歇函数" class="headerlink" title="定时器-setInterval() 间歇函数"></a>定时器-<strong>setInterval()</strong> 间歇函数</h3><ul><li><p>开启定时器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setInterval</span><span class="token punctuation">(</span>函数，间隔时间<span class="token punctuation">)</span> <span class="token comment">//时间也毫秒为单位，1秒==1000ms</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭定时器</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> timer <span class="token operator">=</span><span class="token function">setInterval</span><span class="token punctuation">(</span>函数，间隔时间<span class="token punctuation">)</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><hr><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><blockquote><p>事件是在编程时系统内发生的动作或者发生的事情，比如用户在网页上单击一个按钮</p></blockquote><h4 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h4><blockquote><p>让程序检测是否有事件产生，一旦有事件触发，就立即调用一个函数做出响应，也称为 注册事件</p></blockquote><p>语法：<code>元素.addEventListener('事件',要执行的函数)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//获取元素</span><span class="token keyword">let</span> btn<span class="token operator">=</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token comment">//事件监听</span>btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'被点击了'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>事件监听三要素：</p><ul><li>事件源：那个dom元素被事件触发了，要获取dom元素</li><li>事件：有什么方式触发，比如鼠标点击<strong>click</strong></li><li>事件触发时调用的函数</li></ul><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><ul><li><p>DOM L0</p><p>语法：<code>事件源.on事件=function(){}</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function-variable function">onclick</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点击'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>DOM L2  <span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>语法：<code>事件源.addEventlistener(事件，事件处理函数)</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'点击'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><h4 id=""><a href="#" class="headerlink" title=""></a><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220702092821996.png" alt="image-20220702092821996"></h4><hr><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><blockquote><p>高阶函数可以被简单理解为函数的高级应用，JavaScript 中函数可以被当成【值】来对待，基于这个特性实现函数的高级应用</p></blockquote><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">counter</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">}</span><span class="token comment">//调用</span><span class="token keyword">let</span> result<span class="token operator">=</span><span class="token function">counter</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><blockquote><p>如果将函数A当作参数传递给函数B时，我们称函数A为回调函数</p><p>回调函数本质还是函数，只不过把它当成参数使用</p></blockquote><p>使用场景</p><ul><li><p>定时器<strong>setInterval()</strong> 间歇函数</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">//fn传递了给setInterval ，fn就是回调函数</span><span class="token function">setInterval</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>事件监听</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'我是回调函数'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><hr><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><blockquote><p>环境对象指的是函数内部特殊的变量 this ，它代表着当前函数运行时所处的环境<br>作用：弄清楚this的指向，可以让我们代码更简洁</p></blockquote><ul><li>函数的调用方式不同，this 指代的对象也不同</li><li>【谁调用， this 就是谁】 是判断 this 指向的粗略规则</li><li>直接调用函数，其实相当于是 window.函数，所以 this 指代 window</li></ul><hr><h3 id="编程思想"><a href="#编程思想" class="headerlink" title="编程思想"></a>编程思想</h3><h4 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h4><p>当前元素为A状态,其他元素为B状态</p><p>使用：</p><ol><li>干掉所有人<br>使用for循环</li><li>复活他自己<br>通过this或者下标找到自己或者对应的元素</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//给点击的li加上pink类</span><span class="token operator">&lt;</span>li <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">'pink'</span><span class="token operator">&gt;</span>第一个<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第二个<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>   <span class="token operator">&lt;</span>li<span class="token operator">&gt;</span>第三个<span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">&gt;</span>  <span class="token keyword">let</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           lis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment">// 干掉所有人</span>              <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> btns<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                 btns<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>              <span class="token punctuation">}</span>               <span class="token comment">//复活自己</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>               <span class="token comment">//==================分割线===========================</span>               <span class="token comment">//高级做法</span>               <span class="token comment">// 我只需要找出那个唯一的 pink类，删除</span>               document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.pink'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>               <span class="token comment">// 我的</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'pink'</span><span class="token punctuation">)</span>           <span class="token punctuation">}</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="DOM结点"><a href="#DOM结点" class="headerlink" title="DOM结点"></a>DOM结点</h3><blockquote><p>DOM树里每一个内容都称之为节点</p></blockquote><p>结点类型</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220702101440879.png" alt="image-20220702101440879"></p><ul><li><p>元素结点 <span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>所有的标签：比如 <code>body</code> <code>div</code>，<code>html</code>是根节点</p></li><li><p>属性结点</p><p>所有的属性，比如 <code>herf</code></p></li><li><p>文本结点</p><p>所有的文本</p></li></ul><h4 id="结点的查找"><a href="#结点的查找" class="headerlink" title="结点的查找"></a>结点的查找</h4><p>结点的关系：父节点，子节点，兄弟节点</p><ul><li><p>父节点的查找</p><p>使用<code>parentNode</code>属性，返回最近一级的父节点，找不到返回<strong>null</strong></p><p>语法：<code>子元素.parentNode</code></p></li><li><p>子结点的查找</p><p><code>childNodes</code> - 获得所有的子节点，包括文本节点（空格、换行）、注释节点等</p><p><code>chilrden</code> <span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  -获得所有元素节点，返回的还是一个伪数组</p></li><li><p>兄弟结点的查找</p><p><code>nextElementSibling</code>  查找下一个兄弟结点</p><p><code>previousElementSibling</code>  查找上一个兄弟节点</p></li></ul><h4 id="结点的增加"><a href="#结点的增加" class="headerlink" title="结点的增加"></a>结点的增加</h4><blockquote><p>一般情况下，我们新增节点，按照如下操作</p><p>1创建一个新的节点</p><p>2把创建的新的节点放入到指定的元素内部</p></blockquote><ul><li><p>创建结点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">documnet<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'标签名'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>追加结点</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//插入父元素的最后</span>父元素<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>要插入的元素<span class="token punctuation">)</span><span class="token comment">//插到某个子元素的前面</span>父元素<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>要插入的元素<span class="token punctuation">,</span>在哪个元素的前面<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="结点的克隆"><a href="#结点的克隆" class="headerlink" title="结点的克隆"></a>结点的克隆</h4><blockquote><p>cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值<br>若为true，则代表克隆时会包含后代节点一起克隆<br>若为false，则代表克隆时不包含后代节点<br>默认为false</p></blockquote><p><strong>语法</strong>：<code>元素.cloneNode(布尔值)</code></p><h4 id="结点的删除"><a href="#结点的删除" class="headerlink" title="结点的删除"></a>结点的删除</h4><blockquote><p>删除节点和隐藏节点（display:none） 有区别的： 隐藏节点还是存在的，但是删除，则从html中删除节点在 JavaScript 原生DOM操作中，要删除元素必须通过父元素删除</p></blockquote><p><strong>语法</strong>：<code>父元素.removeChild(要删除的元素)</code></p><hr><h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><p>浏览器进行界面渲染</p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220702104807814.png" alt="image-20220702104807814" style="zoom:150%;"><ul><li>解析（Parser）HTML，生成DOM树(DOM Tree)</li><li>同时解析（Parser） CSS，生成样式规则 (Style Rules)</li><li>根据DOM树和样式规则，生成渲染树(Render Tree)</li><li>进行布局 Layout(回流/重排):根据生成的渲染树，得到节点的几何信息（位置，大小）</li><li>进行绘制 Painting(重绘): 根据计算和获取的信息进行整个页面的绘制</li><li>Display: 展示在页面上</li></ul><h4 id="回流-重排"><a href="#回流-重排" class="headerlink" title="回流(重排)"></a>回流(重排)</h4><blockquote><p>当 Render Tree 中部分或者全部元素的尺寸、结构、布局等发生改变时，浏览器就会重新渲染部分或全部文档的过程称为回流，简单理解影响到布局了，就会有回流</p></blockquote><p>会导致回流的操作</p><ul><li>页面的首次刷新</li><li>浏览器的窗口大小发生改变</li><li>元素的大小或位置发生改变</li><li>改变字体的大小</li><li>内容的变化（如：input框的输入，图片的大小）</li><li>激活css伪类 （如：:hover）</li><li>脚本操作DOM（添加或者删除可见的DOM元素）</li></ul><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><blockquote><p>由于节点(元素)的样式的改变并不影响它在文档流中的位置和文档布局时(比如：color、background-color、<br>outline等), 称为重绘</p></blockquote><p><strong>注：</strong>重绘不一定引起回流，而回流一定会引起重绘。</p><p>练习：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>stlyes<span class="token punctuation">.</span>padding <span class="token operator">=</span> <span class="token string">'2px'</span> <span class="token comment">//重排 + 重绘</span>s<span class="token punctuation">.</span>border <span class="token operator">=</span> <span class="token string">'1px solid red'</span> <span class="token comment">// 重排 + 重绘</span>s<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">'red'</span><span class="token comment">//重绘</span>s<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'#666'</span> <span class="token comment">//重绘</span>s<span class="token punctuation">.</span>fontSize<span class="token operator">=</span> <span class="token string">"14px"</span> <span class="token comment">// 重排 + 重绘</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="事件高级"><a href="#事件高级" class="headerlink" title="事件高级"></a>事件高级</h3><h4 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h4><blockquote><p>内容：事件对象是个对象，这个对象里有事件触发时的相关信息</p><p>例如：鼠标点击事件中，事件对象就存了鼠标点在哪个位置等信息</p></blockquote><p>获取方法：</p><ul><li><p>在事件绑定的回调函数的第一个参数就是事件对象</p></li><li><p>一般命名为 even 、ev 、e</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">元素<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//e就是事件对象</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>常用事件对象的属性</p><ul><li><code>type</code> ：获取当前事件类型</li><li><code>clientX</code> / <code>clientY</code> ：获得光标相对于浏览器可见窗口左上角的位置</li><li><code>offsetX</code> / <code>offsetY</code> :   获取光标相对于当前DOM元素左上角的位置</li><li><code>key</code> ：用户按下的键盘的值，现在不提倡用 <strong>keyCode</strong></li></ul><h4 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h4><blockquote><p>事件流指的是事件完整执行过程的流动路径，两个阶段：事件捕获和事件冒泡</p></blockquote><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220703184458601.png" style="zoom: 200%;"><ul><li><p>说明：假设页面里有个div，当触发事件时，会经历两个阶段，分别是捕获阶段、冒泡阶段</p></li><li><p>简单来说：捕获阶段是 从父到子 冒泡阶段是从子到父</p></li></ul><p><strong>事件冒泡</strong></p><blockquote><p>  当一个元素的事件被触发时，同样的事件将会在该元素的所有祖先元素中依次被触发</p><p>  简单理解：当一个元素触发事件后，会依次向上调用所有父级元素的同名事件</p><p>  事件冒泡是默认存在的</p></blockquote><p><strong>事件捕获</strong></p><blockquote><p>从DOM的根元素开始去执行对应的事件 (从外到里)</p></blockquote><p>说明：</p><ul><li>addEventListener第三个参数传入true代表是捕获阶段触发（很少使用）</li><li>若传入false代表冒泡阶段触发，默认就是false</li><li>若是用 L0 事件监听，则只有冒泡阶段，没有捕获</li></ul><p><strong>阻止事件流动</strong></p><ul><li>因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素</li><li>若想把事件就限制在当前元素内，就需要阻止事件流动</li><li>阻止事件流动需要拿到事件对象</li><li>语法：<code>事件对象.stopProagation()</code></li><li>此方法可以阻断事件流动传播，不光在冒泡阶段有效，捕获阶段也有效</li></ul><p><strong>鼠标经过事件</strong>：</p><ul><li><p><code>mouseover </code>和 <code>mouseout</code> 会有冒泡效果</p></li><li><p><code>mouseenter</code> 和 <code>mouseleave</code>  没有冒泡效果(推荐)</p></li></ul><p><strong>两种注册事件的区别：</strong></p><ul><li><p>传统on注册（L0）</p><ul><li>同一个对象,后面注册的事件会覆盖前面注册(同一个事件)</li><li>直接使用null覆盖偶就可以实现事件的解绑</li><li>都是冒泡阶段执行的</li></ul></li><li><p>事件监听注册（L2）</p><ul><li><p>语法: addEventListener(事件类型, 事件处理函数, 是否使用捕获)</p></li><li><p>后面注册的事件不会覆盖前面注册的事件(同一个事件)</p></li><li><p>可以通过第三个参数去确定是在冒泡或者捕获阶段执行</p></li><li><p>必须使用removeEventListener(事件类型, 事件处理函数, 获取捕获或者冒泡阶段)</p></li><li><p>匿名函数无法被解绑</p></li></ul></li></ul><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><blockquote><p>事件委托其实是利用事件冒泡的特点， 给父元素添加事件，子元素可以触发</p></blockquote><ul><li><p><strong>优点：</strong>给父级元素加事件（可以提高性能）</p></li><li><p><strong>实现：</strong><code>事件对象.target </code>可以获得真正触发事件的元素</p></li></ul><hr><h3 id="滚动事件"><a href="#滚动事件" class="headerlink" title="滚动事件"></a>滚动事件</h3><blockquote><p> 作用：很多网页需要检测用户把页面滚动到某个区域后做一些处理， 比如固定导航栏，比如返回顶部</p></blockquote><p><strong>事件名</strong> <code>scroll</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//可以给window或document添加滚动事件来监听整个页面</span>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//要执行的操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="加载事件"><a href="#加载事件" class="headerlink" title="加载事件"></a>加载事件</h3><h4 id="load-事件"><a href="#load-事件" class="headerlink" title="load 事件"></a>load 事件</h4><ul><li><p>加载外部资源（如图片、外联CSS和JavaScript等）加载完毕时触发的事件</p></li><li><p>为什么要学？</p><ul><li>有些时候需要等页面资源全部处理完了做一些事情</li><li>老代码喜欢把  script  写在  head  中，这时候直接找  dom  元素找不到</li></ul></li><li><p> 事件名：<code>load</code></p></li><li><p>监听页面所有资源加载完毕：</p><ul><li><p>给 window 添加 load 事件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//要执行的操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p> 注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定load事件</p></li></ul><h4 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h4><ul><li><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而<strong>无</strong>需等待样式表全加载</p></li><li><p>事件名：<code>DOMContentLoaded</code></p></li><li><p>监听页面DOM加载完毕：</p><ul><li><p>给 document 添加 DOMContentLoaded 事件</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'DOMContentLoaded'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//要执行的操作</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><hr><h3 id="元素大小和位置"><a href="#元素大小和位置" class="headerlink" title="元素大小和位置"></a>元素大小和位置</h3><p><strong>三大家族</strong></p><ul><li>scroll家族</li><li>offest家族</li><li>client家族</li></ul><h4 id="scroll家族"><a href="#scroll家族" class="headerlink" title="scroll家族"></a>scroll家族</h4><blockquote><p>作用：检测页面滚动的距离</p></blockquote><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220710212619434.png" alt="image-20220710212619434" style="zoom:200%;"><ul><li><p>获取宽高</p><ul><li> 获取元素的<strong>内容总宽高（不包含滚动条）</strong>返回值不带单位</li><li> scrollWidth 和 scrollHeight</li></ul></li><li><p>获取位置（属性可修改）</p><ul><li>获取元素内容往左、往上滚出去看不到的距离</li><li>scrollLeft和scrollTop</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">div<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'scroll'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注：<code>document.documentElement</code> ：HTML 文档返回对象为HTML元素</p></li></ul><h4 id="offest家族"><a href="#offest家族" class="headerlink" title="offest家族"></a>offest家族</h4><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220710213109240.png" alt="image-20220710213109240"></p><ul><li>获取宽高<ul><li> 获取元素的自身宽高、包含元素自身设置的宽高、padding、border</li><li> offsetWidth 和 offsetHeight</li></ul></li><li>获取位置（只读，不可修改）<ul><li>获取元素距离自己定位父级元素的左、上距离</li></ul></li></ul><h4 id="client家族"><a href="#client家族" class="headerlink" title="client家族"></a>client家族</h4><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220710213252589.png" alt="image-20220710213252589" style="zoom:150%;"><ul><li>获取宽高<ul><li>获取元素的可见部分宽高（不包含边框，滚动条等）</li><li>clientWidth和clientHeight</li></ul></li><li>位置<ul><li> clientLeft和clientTop 注意是只读属性</li></ul></li></ul><p><code>resize</code>事件</p><ul><li>改变窗口大小的时候触发的事件，类似css3媒体查询</li></ul><hr><h3 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h3><h4 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h4><blockquote><p>浏览器对象模型</p></blockquote><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713111536299.png" alt="image-20220713111536299" style="zoom:200%;"><ul><li><p>window 是浏览器内置的全局对象，我们所学习的 web apis 的知识内容都是基于 window 对象实现的</p></li><li><p>window 对象下包含了 <code>navigator</code> 、<code>location</code> 、<code>doucment</code>   <code>history</code> 、 <code>srceen</code> 5个属性，即 BOM</p></li><li><p>document 是实现 DOM 的基础，它其实是依附于 window 的属性</p></li><li><p>依附于 window 对象的所有属性和方法，使用时可以省略 window</p></li></ul><h4 id="定时器-延时函数"><a href="#定时器-延时函数" class="headerlink" title="定时器-延时函数"></a>定时器-延时函数</h4><blockquote><p> JavaScript 内置的一个用来让代码延迟执行的函数，叫 setTimeout</p></blockquote><p>语法：<code>setTimeout(回调函数,等待的毫秒数)</code></p><p><strong>setTimeout</strong> 仅执行一次，简单来说把一段代码延迟执行</p><p>清除延时函数语法 ：<code>clearTimeout(延时函数的id)</code></p><p>结合函数的递归可以实现 setInterval 间歇函数 一样的功能</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> d<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//写入页面</span>    clock<span class="token punctuation">.</span>innertext<span class="token operator">=</span>d<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//调用自己 一直循环，倒计时效果</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span>myInterval<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token function">myInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JS执行机制-（面试）-star"><a href="#JS执行机制-（面试）-star" class="headerlink" title="JS执行机制 （面试）:star:"></a>JS执行机制 （面试）<span class="github-emoji"><span>⭐</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h4><blockquote><p>JavaScript 语言的一大特点就是单线程，也就是说，同一个时间只能做一件事。。这是因为 Javascript 这<br>门脚本语言诞生的使命所致——JavaScript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比<br>如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。 应该先进行添加，之后再删除。</p></blockquote><blockquote><p>单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。这样所导致的问<br>题是： 如果 JS 执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p></blockquote><p>同步和异步</p><blockquote><p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出 Web Worker 标准，允许<br>JavaScript 脚本创建多个线程。于是，JS 中出现了同步和异步。</p></blockquote><ul><li><p>同步</p><ul><li>前一个任务执行完才执行后一个任务，程序执行的顺序和代码排列顺序一样</li></ul></li><li><p>异步</p><ul><li><p>执行一个某个任务费很长时间，在做这个任务的同时，还可以去处理其他的任务</p><p>比如：做饭时，等水开的期间可以去其他事，比如切菜</p></li></ul></li><li><p>他们的本质区别： 这条流水线上各个流程的执行顺序不同。</p></li></ul><hr><ul><li><p>同步任务</p><ul><li>同步任务都在主线程上执行，形成一个执行栈。</li></ul></li><li><p>异步任务</p><ul><li><p>JS 的异步是通过回调函数实现的</p></li><li><p>一般来说异步任务有以下三种类型</p><p>1、普通事件，如 click、resize 等<br>2、资源加载，如 load、error 等<br>3、定时器，包括 setInterval、setTimeout 等</p></li><li><p>异步任务相关会添加的任务队列（消息队列）中</p></li></ul></li></ul><hr><p><strong>执行机制</strong></p><ol><li>先执行执行栈里面的同步任务</li><li>异步任务放在消息队列中</li><li>一旦执行栈的执行任务完毕，系统会依次读取消息队列里的异步任务，被读取的异步任务<br>结束等待状态，进入执行栈，开始执行</li></ol><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713115651765.png" alt="image-20220713115651765" style="zoom:150%;"><p><strong>事件循环</strong>（event loop）</p><blockquote><p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为事件循环（ event loop）</p></blockquote><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713115913074.png" alt="image-20220713115913074"></p><hr><h4 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h4><blockquote><p>location 的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</p></blockquote><p> <strong>常用属性和方法：</strong></p><ul><li> href 属性获取完整的 URL 地址，对其赋值时用于地址的跳转</li><li> search 属性获取地址中携带的参数，符号 ？后面部分</li><li> hash 属性获取地址中的啥希值，符号 # 后面部分</li><li> reload 方法用来刷新当前页面，传入参数 true 时表示强制刷新</li></ul><p>语法：<code>loaction.属性</code>  <code>loactiom.方法()</code></p><h4 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h4><blockquote><p>navigator的数据类型是对象，该对象下记录了浏览器自身的相关信息</p></blockquote><p> 常用属性和方法： 通过 userAgent 检测浏览器的版本及平台</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 检测 userAgent（浏览器信息）</span><span class="token operator">!</span><span class="token punctuation">(</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">const</span> userAgent <span class="token operator">=</span> navigator<span class="token punctuation">.</span>userAgent<span class="token comment">// 验证是否为Android或iPhone</span><span class="token keyword">const</span> android <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token class-name">Android</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">?</span><span class="token punctuation">[</span>\s\<span class="token operator">/</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\d<span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token operator">/</span><span class="token punctuation">)</span><span class="token keyword">const</span> iphone <span class="token operator">=</span> userAgent<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token operator">/</span><span class="token punctuation">(</span>iPhone\sOS<span class="token punctuation">)</span>\<span class="token function">s</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\d_<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">)</span><span class="token comment">// 如果是Android或iPhone，则跳转至移动站点</span><span class="token keyword">if</span> <span class="token punctuation">(</span>android <span class="token operator">||</span> iphone<span class="token punctuation">)</span> <span class="token punctuation">{</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'http://m.itcast.cn'</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="histroy对象"><a href="#histroy对象" class="headerlink" title="histroy对象"></a>histroy对象</h4><blockquote><p>history 的数据类型是对象，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</p></blockquote><table><thead><tr><th>history对象和方法</th><th>作用</th></tr></thead><tbody><tr><td>back()</td><td>可以后退功能</td></tr><tr><td>forward()</td><td>可以前进功能</td></tr><tr><td>go(参数)</td><td>前进，后退功能，参数决定，-1后退，1前进</td></tr></tbody></table><h4 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h4><blockquote><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在<br>本地存储大量的数据，HTML5规范提出了相关解决方案</p></blockquote><ol><li>数据存储在用户浏览器中</li><li>设置、读取方便、甚至页面刷新不丢失数据</li><li>容量较大，sessionStorage和localStorage约 5M 左右</li></ol><p><strong>localStorage</strong></p><ol><li>生命周期永久生效，除非手动删除 否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ol><p>语法</p><ul><li>存储数据：<code>localStorage.setItem(key, value)</code></li><li>获取数据：<code>localStorage.getItem(key)</code></li><li>删除数据：<code>localStorage.removeItem(key)</code></li></ul><p>存储复杂数据类型存储：</p><blockquote><p>本地只能存储字符串,无法存储复杂数据类型.需要将复杂数据类型转换成JSON字符串,在存储到本地</p></blockquote><p><strong>JSON.stringify(复杂数据类型) ：</strong></p><p>将复杂数据转换成JSON字符串 <strong>存储</strong> 本地存储中</p><p><strong>JSON.parse(JSON字符串)：</strong></p><p>将JSON字符串转换成对象 <strong>取出</strong> 时候使用</p><hr><p>sessionStorage（了解）<br>     1. 生命周期为关闭浏览器窗口<br>     2. 在同一个窗口(页面)下数据可以共享<br>     3. 以键值对的形式存储使用<br>    4. 用法跟localStorage 基本相同</p><h4 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h4><p>固有属性：</p><blockquote><p>标签天生自带的属性 比如class id title等, 可以直接使用点语法操作</p></blockquote><p>自定义属性:</p><blockquote><p>由程序员自己添加的属性,在DOM对象中找不到, 无法使用点语法操作,必须使用专门的API</p></blockquote><ul><li>获取自定义属性 ：<code>getAttribute('属性名')</code></li><li>设置自定义属性：<code>setAttribute('属性名', '属性值')</code></li><li>删除自定义属性：<code>removeAttribute('属性名') </code></li></ul><p>data-自定义属性：</p><blockquote><p>传统的自定义属性没有专门的定义规则,开发者随意定值,不够规范,所以在html5中推出来了专门的data-自定义属性 在标签上一律以data-开头</p></blockquote><p>在DOM对象上一律以dataset对象方式获取</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220713122248633.png" alt="image-20220713122248633"></p><hr><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><blockquote><p>正则表达式（Regular Expression）是用于匹配字符串中字符组合的模式。在 JavaScript中，正则表达式也是对象</p></blockquote><p>正则表达式在 JavaScript中的使用场景：</p><ul><li>例如验证表单：用户名表单只能输入英文字母、数字或者下划线， 昵称输入框中可以输入中文(匹配)</li><li>比如用户名: <code> /^[a-z0-9_-]{3,16}$/</code></li><li>过滤掉页面内容中的一些敏感词(替换)，或从字符串中获取我们想要的特定部分(提取)等 。</li></ul><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><p><strong>使用</strong>：</p><ol><li>定义规则</li><li>查找</li></ol><p><strong>语法</strong>：<code>let 变量名=/表达式/</code></p><ul><li>/ / 是正则表达式字面量，比如 ：<code>let reg=/abc/</code></li></ul><p><strong>判断</strong>：</p><ul><li><p>test() 方法 用来查看正则表达式与指定的字符串是否匹配 ，返回 false 或 true</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'hello ,world'</span><span class="token keyword">let</span> reg <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hello</span><span class="token regex-delimiter">/</span></span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>exec() 方法 在一个指定字符串中执行一个搜索匹配</p><p>如果匹配成功，exec() 方法返回一个数组，否则返回null</p></li></ul><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><blockquote><p>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</p></blockquote><ul><li><p>比如，规定用户只能输入英文26个英文字母，普通字符的话 abcdefghijklm…..</p><p>但是换成元字符写法： [a-z]</p></li></ul><p><strong>方便记忆和学习，众多的元字符进行了分类：</strong></p><ol><li><p><strong>边界符</strong>（表示位置，开头和结尾，必须用什么开头，用什么结尾）</p><p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220714135805923.png" alt="image-20220714135805923"></p><p><strong>注意</strong>：如果 <code>^</code> 和 <code>$</code>在一起，表示必须是精确匹配。</p></li><li><p><strong>量词</strong> （表示重复次数）</p><p>量词用来 设定某个模式出现的次数</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220714135915669.png" alt="image-20220714135915669"></p><p><strong>注意</strong>： 逗号左右两侧千万不要出现空格</p></li><li><p><strong>字符类</strong> （比如  <code>\d</code>  表示 0~9）</p><ul><li><p><code>-</code> 连字符</p><p>使用连字符 <code>-</code> 表示一个范围</p></li><li><p><input disabled="" type="checkbox">  比如：</p><ol><li>[a-z] 表示 a 到 z 26个英文字母都可以</li><li>[a-zA-Z] 表示大小写都可以</li><li>[0-9] 表示 0~9 的数字都可以</li></ol></li><li><p><input disabled="" type="checkbox">  [ ] 里面加上 <code>^</code> 取反符号<br>比如：<br><code>[^a-z] </code>匹配除了小写字母以外的字符<br>  注意要写到中括号里面</p></li><li><p><code>. </code>  匹配除换行符之外的任何单个字符</p></li><li><p><input disabled="" type="checkbox">  预定义：指的是某些常见模式的简写方式</p></li></ul><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220714140426304.png" alt="image-20220714140426304"></p></li><li><p><strong>修饰符</strong></p><p>修饰符约束正则执行的某些细节行为，如是否区分大小写、是否支持多行匹配等</p><p>语法：</p><p><code>/表达式/修饰符</code></p><p> i  是单词 ignore 的缩写，正则匹配时字母不区分大小写<br>g  是单词 global 的缩写，匹配所有满足正则表达式的结果</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>替换 replace 替换：（过滤敏感词）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">字符串<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token operator">/</span>正则表达式<span class="token operator">/</span>，<span class="token string">'替换的文本'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端篇" scheme="http://fantasy06.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
    <category term="Hexo" scheme="http://fantasy06.github.io/tags/Hexo/"/>
    
    <category term="Github" scheme="http://fantasy06.github.io/tags/Github/"/>
    
    <category term="前端" scheme="http://fantasy06.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>javascript 进阶</title>
    <link href="http://fantasy06.github.io/posts/d15997ef.html"/>
    <id>http://fantasy06.github.io/posts/d15997ef.html</id>
    <published>2020-07-26T08:42:00.000Z</published>
    <updated>2022-08-06T06:56:55.115Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><blockquote><p>作用域规定了变量能够被访问的范围，离开这个范围变量就不能被访问</p></blockquote><p><strong>作用域分为：</strong></p><h3 id="局部作用域"><a href="#局部作用域" class="headerlink" title="局部作用域"></a>局部作用域</h3><p>局部作用域分为函数作用域和块作用域。</p><p><strong>函数作用域：</strong></p><blockquote><p>在函数内部声明的变量只能在函数内部被访问，外部无法访问</p></blockquote><p>总结：</p><ol><li>函数内部声明的变量，在函数外部无法被访问</li><li>函数的参数也是函数内部的局部的变量</li><li>不同函数内部声明的变量无法相互访问</li><li>函数执行完毕后，函数的变量实际被清空了</li></ol><p><strong>块作用域：</strong></p><blockquote><p>在JavaScript中使用 <code>{}</code> 包裹的代码块内部声明的变量外部将有可能无法被访问</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">// i 只能的该代码块中被访问</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment">// 超出了t的作用域 ，报错</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ol><li><p><code>let</code> 声明的变量，<code>const</code> 声明的常量，都会产生块级作用域</p></li><li><p><code>var</code> 声明的变量不会产生块级作用域</p></li><li><p>不同代码块之间的变量无法相互访问</p></li><li><p>推荐使用 <code>let</code> 和  <code>const</code></p><h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3></li></ol><blockquote><p>在 <code>&lt;script&gt;</code> 标签 和 <code>.js</code> 文件的<strong>最外层</strong>就是全局作用域，在此声明的变量在函数内部也可以访问，全局作用域下声明的变量，任何其他作用域都可以被访问</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局作用域，下声明变量num</span><span class="token keyword">const</span> num<span class="token operator">=</span><span class="token number">10</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//函数内部可以使用</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ol><li>为 window 对象动态添加的属性默认也是全局的，不推荐</li><li>函数未使用任何关键字声明的变量为全局变量，不推荐</li><li> 尽可能少的声明全局变量，防止全局变量被污染</li></ol><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><blockquote><p>作用域链本质是底层的变量查找机制</p></blockquote><ul><li>函数在被执行时，会优先找当前函数作用域中查找变量</li><li>如果当前作用域查找不到则会依次逐级查找父级作用域直到全局作用域</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//全局作用域</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">//局部作用域</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">function</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        a <span class="token operator">=</span> <span class="token number">2</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment">// 2</span>    <span class="token punctuation">}</span>    <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结：</strong></p><ol><li>嵌套更新的作用域串联起来形成了作用域链</li><li>相同作用域链中按着从小到大的规则查找变量</li><li>子作用域能够访问父级作用域，父级作用域无法访问子级作用域</li></ol><h3 id="JS-的垃圾回收机制"><a href="#JS-的垃圾回收机制" class="headerlink" title="JS 的垃圾回收机制"></a>JS 的垃圾回收机制</h3><blockquote><p>垃圾回收机制 (Garbage Collection) 简称 GC</p><p>JS 中的内存的分配和回收都是自动完成的，，内存在不使用的时候会被垃圾回收器自动回收。</p><p>但如果不了解JS的内存管理机制，我们同样非常容易成内存泄漏（内存无法被回收）的情况</p><p>不再用到的内存，没有及时释放，就叫做内存泄漏</p></blockquote><p><strong>内存的生命周期 ：</strong></p><ol><li>内存分配：当我们声明变量、函数、对象的时候，系统会自动为他们分配内存</li><li>内存使用：即读写内存，也就是使用变量、函数等</li><li>内存回收：使用完毕，由垃圾回收自动回收不再使用的内存</li><li><ul><li>全局变量一般不会回收(关闭页面回收)；</li><li>一般情况下局部变量的值, 不用了, 会被自动回收掉</li></ul></li></ol><p><strong>垃圾回收算法说明</strong></p><blockquote><p>所谓垃圾回收, 核心思想就是如何判断内存是否已经不再会被使用了, 如果是, 就视为垃圾, 释放掉<br>下面介绍两种常见的浏览器垃圾回收算法: 引用计数法 和 标记清除法</p></blockquote><p>引用计数<br>IE采用的引用计数算法, 定义“内存不再使用”的标准很简单，就是看一个对象是否有指向它的引用。<br>算法：</p><ol><li>跟踪记录每个值被引用的次数。</li><li>如果这个值的被引用了一次，那么就记录次数1</li><li>多次引用会累加。</li><li>如果减少一个引用就减1。</li><li>如果引用次数是0 ，则释放内存。</li></ol><p>引用计数算法是个简单有效的算法。<br>但它却存在一个致命的问题：嵌套引用。<br>如果两个对象相互引用，尽管他们已不再使用，垃圾回收器不会进行回收，导致内存泄露。</p><p>标记清除法<br>现代的浏览器已经不再使用引用计数算法了。<br>现代浏览器通用的大多是基于标记清除算法的某些改进算法，总体思想都是一致的。<br>核心：</p><ol><li>标记清除算法将“不再使用的对象”定义为“无法达到的对象”。</li><li>就是从根部（在JS中就是全局对象）出发定时扫描内存中的对象。 凡是能从根部到达的对象，都是还需要使用的。</li><li>那些无法由根部出发触及到的对象被标记为不再使用，稍后进 行回收。</li></ol><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720101238312.png" alt="image-20220720101238312"></p><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><blockquote><p>概念：一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域<br>简单理解：闭包 = 内层函数 + 外层函数的变量</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>outer<span class="token comment">//内层函数调用外层函数的变量，就是闭包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用： 封闭数据，提供操作，外部也可以访问函数内部的变量</p><p>基本格式：</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720102143313.png" alt="image-20220720102143313"></p><p>闭包应用：实现数据的私有<br>比如，我们要做个统计函数调用次数，函数调用一次，就++</p><p>普通写法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    count<span class="token operator">++</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//2</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个count 是个全局变量，很容易被修改 </p><p>闭包写法：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        count<span class="token operator">++</span>       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> result <span class="token operator">=</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//2</span><span class="token function">result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现了数据私有，无法直接修改count</p><p> 闭包可能引起的问题：内存泄漏</p><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><blockquote><p>变量提升是 JavaScript 中比较“奇怪”的现象，它允许在变量声明之前即被访问（仅存在于var声明变量）</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token comment">//不报错 控制台显示undefined</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'hello'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意：</p><ol><li>变量在未声明即被访问时会报语法错误</li><li>变量在var声明之前即被访问，变量的值为 undefined</li><li>let / const  声明的变量不存在变量提升</li><li>变量提升出现在相同作用域当中</li><li>实际开发中推荐先声明再访问变量</li></ol><h2 id="函数进阶"><a href="#函数进阶" class="headerlink" title="函数进阶"></a>函数进阶</h2><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用。</p><h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul><li><p>动态参数</p><p>arguments 是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//求和函数 不管用户传入几个实参，都要把和求出来</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//15</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>剩余参数</p><p>剩余参数允许我们将一个不定数量的参数表示为一个数组</p><ol><li><code>...</code> 是语法符号，置于最末函数形参之前，用于获取多余的实参</li><li>借助 <code>...</code> 获取的剩余实参，是个真数组</li></ol><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>other</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> other<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        s <span class="token operator">+=</span> other<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> s<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token comment">//15</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>区别：</p><ol><li>… 是语法符号，置于最末函数形参之前，用于获取多余的实参</li><li>借助 … 获取的剩余实参，是个真数组</li></ol></li></ul><hr><p>展开运算符：<code>...</code></p><blockquote><p>展开运算符 (…)， 将一个数组进行展开，不会修改原数组</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span> <span class="token comment">//1 2 3 4 5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>典型运用场景： 求数组最大值(最小值)、合并数组等</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token keyword">const</span> arr2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token comment">//最大值</span><span class="token keyword">const</span> max<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token comment">//合拼</span><span class="token keyword">const</span> arr3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展开运算符 or 剩余参数<br>剩余参数：函数参数使用，得到真数组<br>展开运算符：数组中使用，数组展开</p><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><strong>语法：</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//普通函数</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//1.箭头 无参数</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token comment">//2.只有一个参数</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token parameter">x</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token punctuation">}</span><span class="token comment">//3.函数体只有一行代码，可以写一行上，无需写 return 直接返回值</span><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y  <span class="token comment">//返回 x + y 的值</span><span class="token comment">//加括号的函数体返回对象字面量表达式</span><span class="token keyword">const</span> <span class="token function-variable function">fn1</span> <span class="token operator">=</span> <span class="token parameter">uname</span> <span class="token operator">=&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>uname <span class="token operator">:</span> uname<span class="token punctuation">}</span><span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">fn1</span><span class="token punctuation">(</span><span class="token string">'叶湘伦'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//控制台：{uname:"叶湘伦"}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>箭头函数属于表达式函数，因此不存在函数提升</li><li>箭头函数只有一个参数时可以省略圆括号 ()</li><li>箭头函数函数体只有一行代码时可以省略花括号 {}，并自动做为返回值被<br>返回</li><li>加括号的函数体返回对象字面量表达式</li></ol><p> <strong>箭头函数参数：</strong></p><ol><li>普通函数有 <code>arguments</code> 动态参数</li><li>箭头函数没有 <code>arguments </code>动态参数，但是有 剩余参数 <code>..args</code></li></ol><p> <strong>箭头函数 this：</strong><br>在箭头函数出现之前，每一个新函数根据它是被如何调用的来定义这个函数的 this 值<br>箭头函数不会创建自己的 this ,它只会从自己的作用域链的上一层沿用 this 。</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720110228858.png" alt="image-20220720110228858"></p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720110259612.png" alt="image-20220720110259612"></p><p>在开发中【使用箭头函数前需要考虑函数中 this 的值】，事件回调函数使用箭头函数时，this 为全局的 window，因此，DOM事件回调函数为了简便，还是不太推荐使用箭头函数</p><h2 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h2><blockquote><p>数组解构是将数组的单元值快速批量赋值给一系列变量的简洁语法。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通的数组</span>  <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 批量声明变量 a b c </span>  <span class="token comment">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span>  <span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>基本语法：</p><ol><li>赋值运算符 <code>=</code> 左侧的 <code>[]</code> 用于批量声明变量，右侧数组的单元值将被赋值给左侧的变量</li><li>变量的顺序对应数组单元值的位置依次进行赋值操作</li><li>变量的数量大于单元值数量时，多余的变量将被赋值为  <code>undefined</code></li><li>变量的数量小于单元值数量时，可以通过 <code>...</code> 获取剩余单元值，但只能置于最末位</li><li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code> 时默认值才会生效</li></ol><p><strong>对象解构</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通对象</span> <span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token operator">:</span> <span class="token string">'小明'</span><span class="token punctuation">,</span>   age<span class="token operator">:</span> <span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 批量声明变量 name age</span> <span class="token comment">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> age<span class="token punctuation">}</span> <span class="token operator">=</span> user console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token comment">// 小明</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token comment">// 18</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>赋值运算符 <code>=</code> 左侧的 <code>{}</code> 用于批量声明变量，右侧对象的属性值将被赋值给左侧的变量</li><li>对象属性的值将被赋值给与属性名相同的变量</li><li>对象中找不到与变量名一致的属性时变量值为 <code>undefined</code></li><li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code> 时默认值才会生效</li></ol><h2 id="遍历数组-forEach-方法"><a href="#遍历数组-forEach-方法" class="headerlink" title="遍历数组 forEach 方法"></a>遍历数组 forEach 方法</h2><blockquote><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">遍历数组<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">当前数组元素<span class="token punctuation">,</span>索引号</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//函数体</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><ol><li>forEach 主要是遍历数组</li><li>参数当前数组元素是必须要写的， 索引号可选。</li></ol><h2 id="筛选数组-filter-方法"><a href="#筛选数组-filter-方法" class="headerlink" title="筛选数组 filter 方法"></a>筛选数组 filter 方法</h2><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220720111855654.png" alt="image-20220720111855654" style="zoom: 200%;"><blockquote><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</p></blockquote><p>主要使用场景： 筛选数组符合条件的元素，并返回筛选之后元素的新数组</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">遍历数组<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">当前数组元素<span class="token punctuation">,</span>索引号</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> 筛选条件<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">//筛选数组大于30的元素</span><span class="token keyword">const</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">62</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">]</span><span class="token keyword">const</span> re <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> item <span class="token operator">&gt;</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span> <span class="token comment">//[62,61,56,36]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>返回值：返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组<br>参数：currentValue 必须写， index 可选<br>因为返回新数组，所以不会影响原数组</p><h2 id="对象创建方法"><a href="#对象创建方法" class="headerlink" title="对象创建方法"></a>对象创建方法</h2><ul><li><p>利用字面量创建</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'叶湘伦'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用 new Object 创建对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token operator">:</span><span class="token string">'叶湘伦'</span><span class="token punctuation">,</span>    age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>利用构造函数创建</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 构造函数</span><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token comment">//创建一个对象</span><span class="token keyword">const</span> Stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'叶湘伦'</span>，<span class="token number">18</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong></p><ul><li>语法：大写字母开头的函数</li><li>约定：它们的命名以大写字母开头。只能由 “new” 操作符来执行。</li></ul><p><strong>说明：</strong></p><ol><li>使用 new 关键字调用函数的行为被称为实例化</li><li>实例化构造函数时没有参数可以省略（）</li><li>构造函数内部不用写 return ，返回值即为新建的对象</li><li>new Object（） new Date（） 也是实例化构造函数</li></ol><p><strong>实列化执行过程：</strong></p><ol><li>创建一个新空对象</li><li>构造函数 this 指向新对象</li><li>执行构造函数代码，修改 this ，添加新的属性</li><li>返回新的对象</li></ol></li></ul><h3 id="实例对象"><a href="#实例对象" class="headerlink" title="实例对象"></a>实例对象</h3><blockquote><p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法称为实例成员</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 构造函数</span><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//构造函数内部的 this 就是实例对象</span>    <span class="token comment">//实例对象中动态添加属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age      <span class="token comment">//实例对象中动态添加方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">sayHi</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//实例化 ，Stu 是实列对象</span><span class="token comment">// Stu 实际就是构造函数内部的 this</span><span class="token keyword">const</span> Stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'叶湘伦'</span>，<span class="token number">18</span><span class="token punctuation">)</span><span class="token comment">//访问实例属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Stu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment">//调用实列方法</span>Stu<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>实例对象的属性和方法即为实例成员</li><li>为构造函数传入参数，动态创建结构相同但值不同的对象</li><li>构造函数创建的实例对象彼此独立互不影响。</li></ol><p><strong>静态成员：</strong></p><blockquote><p>在 JavaScript 中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员。</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 构造函数</span><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span>age</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//实例成员</span><span class="token punctuation">}</span><span class="token comment">//静态属性</span>Obj<span class="token punctuation">.</span>eyes <span class="token operator">=</span> <span class="token number">2</span> Obj<span class="token punctuation">.</span>arms <span class="token operator">=</span> <span class="token number">2</span><span class="token comment">//静态方法</span>Obj<span class="token punctuation">.</span>walk <span class="token operator">=</span> <span class="token function">funtion</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'走路中'</span><span class="token punctuation">)</span>    <span class="token comment">//this 指向 person</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>eyes<span class="token punctuation">)</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><ol><li>静态成员指的是添加到构造函数本身的属性和方法</li><li>一般公共特征的属性或方法静态成员设置为静态成员</li><li>静态成员方法中的 <code>this</code> 指向构造函数本身</li></ol><h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><p> 在 JavaScript 中<strong>最主要</strong>的数据类型有 6 种，分别是字符串、数值、布尔、undefined、null 和 对象，常见的对象类型数据包括数组和普通对象。其中字符串、数值、布尔、undefined、null 也被称为简单类型或基础类型，对象也被称为引用类型。</p><p>在 JavaScript 内置了一些构造函数，绝大部的数据处理都是基于这些构造函数实现的，JavaScript 基础阶段学习的 <code>Date</code> 就是内置的构造函数。</p><p>引用类型：</p><p><code>Object</code> :</p><p>三个常用静态方法（静态方法就是只有构造函数Object可以调用的）</p><p><code>Object.keys</code> 静态方法获取对象中所有属性（键）</p><p><code>Object.values</code> 静态方法获取对象中所有属性值</p><p><code>Object.assign</code> 静态方法常用于对象拷贝</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//Object.keys</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span><span class="token string">'叶湘伦'</span><span class="token punctuation">,</span>age<span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">const</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// ['name','age']  返回是一个数组</span><span class="token comment">//Object.values</span><span class="token keyword">const</span> arr2 <span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span>  <span class="token comment">// ['叶湘伦',18]  返回是一个数组</span><span class="token comment">//Object.assign</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj2<span class="token punctuation">,</span>obj<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span>  <span class="token comment">// {name:'叶湘伦',age:18}</span><span class="token comment">//使用：经常使用的场景给对象添加属性</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span><span class="token punctuation">{</span>sex<span class="token operator">:</span><span class="token string">'男'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>  <span class="token comment">// {name:'叶湘伦',age:18,sex:'男'}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><code>Array</code> :</p><p>数组常见实例方法-核心方法</p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220721112028550.png" alt="image-20220721112028550" style="zoom:150%;"><table><thead><tr><th>方法</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>forEach</td><td>遍历数组</td><td>不返回值，用于不改变值，经常用于查找打印输出值</td></tr><tr><td>filter</td><td>过滤数组</td><td>筛选数组元素，并生成新数组</td></tr><tr><td>map</td><td>迭代数组</td><td>返回新数组，新数组里面的元素是处理之后的值，经常用于处理数据</td></tr><tr><td>reduce</td><td>累积器</td><td>返回函数累计处理的结果，经常用于求和等</td></tr></tbody></table><p>总结：</p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220721115506798.png" alt="image-20220721115506798" style="zoom:150%;"><ol><li><p>推荐使用字面量方式声明数组，而不是 <code>Array</code> 构造函数</p></li><li><p>实例方法 <code>forEach</code> 用于遍历数组，替代 <code>for</code> 循环 (重点)</p></li><li><p>实例方法 <code>filter</code> 过滤数组单元值，生成新数组(重点)</p></li><li><p>实例方法 <code>map</code> 迭代原数组，生成新数组(重点)</p></li><li><p>实例方法 <code>join</code> 数组元素拼接为字符串，返回字符串(重点)</p></li><li><p>实例方法 <code>find</code> 查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined(重点)</p></li><li><p>实例方法<code>every</code> 检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false(重点)</p></li><li><p>实例方法<code>some</code> 检测数组中的元素是否满足指定条件 <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p></li><li><p>实例方法 <code>concat</code> 合并两个数组，返回生成新数组</p></li><li><p>实例方法 <code>sort</code> 对原数组单元值排序</p></li><li><p>实例方法 <code>splice</code> 删除或替换原数组单元</p></li><li><p>实例方法 <code>reverse</code> 反转数组</p></li><li><p>实例方法 <code>findIndex</code> 查找元素的索引值</p></li></ol><p><code>String</code>：</p><p>总结：</p><ol><li>实例属性 <code>length</code> 用来获取字符串的度长(重点)</li><li>实例方法 <code>split('分隔符')</code> 用来将字符串拆分成数组(重点)</li><li>实例方法 <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code> 用于字符串截取(重点)</li><li>实例方法 <code>startsWith(检测字符串[, 检测位置索引号])</code> 检测是否以某字符开头(重点)</li><li>实例方法 <code>includes(搜索的字符串[, 检测位置索引号])</code> 判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false(重点)</li><li>实例方法 <code>toUpperCase</code> 用于将字母转换成大写</li><li>实例方法 <code>toLowerCase</code> 用于将就转换成小写</li><li>实例方法 <code>indexOf</code> 检测是否包含某字符</li><li>实例方法 <code>endsWith</code> 检测是否以某字符结尾</li><li>实例方法 <code>replace</code> 用于替换字符串，支持正则匹配</li><li>实例方法 <code>match</code> 用于查找字符串，支持正则匹配</li></ol><p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p><hr><h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><blockquote><p>JavaScript 规定，每一个构造函数都有一个 prototype 属性，指向另一个对象，所以我们也称为原型对象</p></blockquote><p><strong>作用：</strong></p><ol><li><p>共享方法</p></li><li><p>可以把那些不变的方法，直接定义在 prototype 对象上</p></li></ol><p>constructor 属性： 指向该原型对象的构造函数</p><p>对象原型：<br>对象都会有一个属性 <code>__proto__</code> 指向构造函数的 prototype 原型对象，之所以我们对象可以使用构造函数 prototype 原型对象的属性和方法，就是因为对象有<code> __proto__</code> 原型的存在</p><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220722105529340.png" alt="image-20220722105529340"></p><p><strong>总结：</strong></p><ol><li><code>prototype</code>是什么？哪里来的？</li></ol><ul><li>原型（原型对象）</li><li>构造函数都自动有原型</li></ul><ol start="2"><li><code>constructor</code>属性在哪里？作用干啥的？</li></ol><ul><li><p><code>prototype</code>原型和对象原型<code>__proto__</code>里面都有</p></li><li><p>都指向创建实例对象/原型的构造函数</p></li></ul><ol start="3"><li><code>__proto__</code>属性在哪里？指向谁？</li></ol><ul><li>在实例对象里面</li><li>指向原型 <code>prototype</code></li></ul><p>原型继承</p><blockquote><p>继承是面向对象编程的另一个特征，通过继承进一步提升代码封装的程度，JavaScript 中大多是借助原型对象实现继承的特性。</p></blockquote><ol><li><p>封装-抽取公共部分</p><ul><li>把男人和女人公共的部分抽取出来放到人类里面</li></ul></li><li><p>继承-让男人和女人都能继承人类的一些属性和方法</p></li></ol><ul><li>把男人女人公共的属性和方法抽取出来 People</li><li> 然后赋值给Man的原型对象，可以共享这些属性和方法</li><li>注意让constructor指回Man这个构造函数</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//人类</span><span class="token keyword">const</span> People <span class="token operator">=</span> <span class="token punctuation">{</span>    head<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    eyes<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    leys<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//男人</span><span class="token keyword">function</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//公共属性和方法给原型</span><span class="token class-name">Man</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> People<span class="token comment">//如果我们给男人添加了一个吸烟的方法，发现女人自动也添加这个方法</span><span class="token comment">//男人和女人都同时使用了同一个对象，根据引用类型的特点，他们指向同一个对象，修改一个就会都影响</span><span class="token class-name">Man</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">smoking</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//女人</span><span class="token keyword">function</span> <span class="token function">Woamn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment">//独有方法</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">body</span> <span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 继承写法完善 ,解决上面问题</span><span class="token comment">//男人和女人不要使用同一个对象，但是不同对象里面包含相同的属性和方法</span><span class="token comment">//答案：构造函数</span><span class="token comment">//new 每次都会创建一个新的对象</span><span class="token keyword">function</span> <span class="token function">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">{</span>    head<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>    eyes<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    leys<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>    <span class="token function-variable function">say</span><span class="token operator">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//男人</span><span class="token keyword">function</span> <span class="token function">Man</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//公共属性和方法</span><span class="token class-name">Man</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">People</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>原型链：</strong></p><blockquote><p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链</p></blockquote><p><img src="https://picgo-fantasy06.oss-cn-guangzhou.aliyuncs.com/img/image-20220722111316754.png" alt="image-20220722111316754"></p><p>原型链-查找规则：</p><ol><li>当访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性。</li><li> 如果没有就查找它的原型（也就是 <code>__proto__</code>指向的 <code>prototype </code>原型对象）</li><li>如果还没有就查找原型对象的原型（<code>Object</code> 的原型对象）</li><li>依此类推一直找到 <code>Object </code>为止（null）</li><li><code>__proto__</code>对象原型的意义就在于为对象成员查找机制提供一个方向，或者说一条路线</li></ol><hr><h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><p><strong>拷贝的是地址</strong><br><strong>常见方法：</strong></p><ol><li>拷贝对象：<code>Object.assgin()</code>  展开运算符 <code>{...obj} </code>拷贝对象</li><li>拷贝数组：<code>Array.prototype.concat()</code> 或者 <code>[...arr]</code></li></ol><p><strong>总结：</strong></p><ol><li>直接赋值和浅拷贝有什么区别？</li></ol><ul><li>直接赋值的方法，只要是对象，都会相互影响，因为是直接拷贝对<br>象栈里面的地址</li><li>浅拷贝如果是一层对象，不相互影响，如果出现多层对象拷贝还会<br>相互影响</li></ul><ol start="2"><li>浅拷贝怎么理解？</li></ol><ul><li>拷贝对象之后，里面的属性值是简单数据类型直接拷贝值</li><li> 如果属性值是引用数据类型则拷贝的是地址</li></ul><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p><strong>拷贝的是对象，不是地址</strong></p><p>常见方法：</p><ol><li>通过递归实现深拷贝</li><li>lodash/cloneDeep</li><li>通过JSON.stringify()实现</li></ol><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="throw-抛异常"><a href="#throw-抛异常" class="headerlink" title="throw 抛异常"></a>throw 抛异常</h3><p>总结：</p><ol><li><code>throw</code> 抛出异常信息，程序也会终止执行</li><li><code>throw </code>后面跟的是错误提示信息</li><li><code>Error</code> 对象配合 <code>throw</code> 使用，能够设置更详细的错误信息</li></ol><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try/catch"></a>try/catch</h3><p>总结：</p><ol><li><code>try...catch</code> 用于捕获错误信息</li><li>将预估可能发生错误的代码写在 <code>try</code> 代码段中</li><li>如果 <code>try</code> 代码段中出现错误后，会执行 <code>catch </code>代码段，并截获到错误信息</li><li><code>finally</code> 不管是否有错误，都会执行</li></ol><p> <strong>debugger</strong> ：类似浏览器调试打断点</p><h2 id="处理this"><a href="#处理this" class="headerlink" title="处理this"></a>处理this</h2><h3 id="this指向-普通函数"><a href="#this指向-普通函数" class="headerlink" title="this指向-普通函数"></a>this指向-普通函数</h3><blockquote><p>普通函数的调用方式决定了 this 的值，即【谁调用 this 的值指向谁】</p></blockquote><p>普通函数没有明确调用者时 this 值为 window，严格模式下没有调用者时 this 的值为 undefined</p><h3 id="this指向-箭头函数"><a href="#this指向-箭头函数" class="headerlink" title="this指向-箭头函数"></a>this指向-箭头函数</h3><p>箭头函数中的 this 与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 this ！</p><ol><li>箭头函数会默认帮我们绑定外层 this 的值，所以在箭头函数中 this 的值和外层的 this 是一样的</li><li>箭头函数中的this引用的就是最近作用域中的this</li><li>向外层作用域中，一层一层查找this，直到有this的定义</li></ol><h3 id="改变this"><a href="#改变this" class="headerlink" title="改变this"></a>改变this</h3><p><code>call()</code> 方法调用函数，同时指定被调用函数中 this 的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ol><li><p><code>thisArg</code>：在 fn 函数运行时指定的 <code>this</code> 值</p></li><li><p><code>arg1，arg2</code>：传递的其他参数</p></li><li><p>返回值就是函数的返回值，因为它就是调用函数</p></li></ol><hr><p><code>apply()</code> 调用函数，同时指定被调用函数中 this 的值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span><span class="token punctuation">[</span>argArray<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ol><li><code>thisArg</code>：在fn函数运行时指定的 this 值</li><li><code>argsArray</code>：传递的值，必须包含在数组里面</li><li> 返回值就是函数的返回值，因为它就是调用函数</li><li> 因此 <code>apply</code> 主要跟数组有关系，比如使用 <code>Math.max() </code>求数组的最大值</li></ol><hr><p><code>bind()</code> 不会调用函数。但是能改变函数内部this 指向</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span>arg1<span class="token punctuation">,</span>arg2<span class="token punctuation">,</span><span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明：</p><ol><li><code>thisArg</code>：在 fn 函数运行时指定的 <code>this</code> 值</li><li><code>arg1，arg2</code>：传递的其他参数</li><li> 返回由指定的 this 值和初始化参数改造的 原函数拷贝 （新函数）</li><li>因此当我们只是想改变 this 指向，并且不想调用这个函数的时候，可以使用  bind，比如改变定时器内部的 this 指向.</li></ol><hr><p>总结：</p><ul><li><p>区别</p><ol><li><code>call</code> 和 <code>apply</code> 会调用函数, 并且改变函数内部 this 指向</li><li><code>call</code> 和 <code>apply</code> 传递的参数不一样, <code>call</code> 传递参数 <code>aru1, aru2..</code> 形式 <code>apply</code> 必须数组形式<code>[arg]</code></li><li><code>bind</code> 不会调用函数, 可以改变函数内部 this 指向</li></ol></li><li><p>主要应用场景</p><ol><li>call 调用函数并且可以传递参数</li><li>apply 经常跟数组有关系. 比如借助于数学对象实现数组最大值最小值</li><li>bind 不调用函数,但是还想改变this指向. 比如改变定时器内部的this指向.</li></ol></li></ul><hr><h2 id="节流和防抖"><a href="#节流和防抖" class="headerlink" title="节流和防抖"></a>节流和防抖</h2><p> <strong>节流：</strong></p><blockquote><p>就是指连续触发事件但是在 n 秒中只执行一次函数，比如可以利用节流实现 1s之内 只能触发一次鼠标移动事件</p></blockquote><p> <strong>防抖：</strong></p><blockquote><p>指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间</p></blockquote><p><strong>使用场景</strong></p><ul><li>节流： 鼠标移动，页面尺寸发生变化，滚动条滚动等开销比较大的情况下</li><li>防抖： 搜索框输入，设定每次输入完毕n秒后发送请求，如果期间还有输入，则从新计算时间</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端篇" scheme="http://fantasy06.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
    <category term="笔记" scheme="http://fantasy06.github.io/tags/%E7%AC%94%E8%AE%B0/"/>
    
    <category term="基础" scheme="http://fantasy06.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Hexo之渲染绕过</title>
    <link href="http://fantasy06.github.io/posts/17fd92ae.html"/>
    <id>http://fantasy06.github.io/posts/17fd92ae.html</id>
    <published>2020-04-27T16:00:00.000Z</published>
    <updated>2022-08-06T06:48:13.698Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="0x001-Hexo-渲染"><a href="#0x001-Hexo-渲染" class="headerlink" title="0x001 Hexo 渲染"></a>0x001 Hexo 渲染</h3><p>  在Hexo部署时会默认渲染source下的所有html页面，但有时候想在Hexo博客上单独自定义html页面或README.md时，却不希望被Hexo渲染。因此对某个文件或者目录进行排除渲染是非常必要的。</p><h3 id="0x002-方法一：font-matter"><a href="#0x002-方法一：font-matter" class="headerlink" title="0x002 方法一：font matter"></a>0x002 方法一：font matter</h3><p><code>Hexo</code>新建网站页面，然后将你的代码直接写入 <code>index.md</code> 中</p><p>在 <code>Front matter</code> 中添加 <code>layout: false</code>，此方法适用于单一的纯<code>HTML</code><br><code>CSS</code> 页面。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">---title: toolsdate: <span class="token number">2020</span>-04-28 00:00:00type: <span class="token string">"tools"</span>layout: <span class="token boolean">false</span>---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x003-方法二：skip-render"><a href="#0x003-方法二：skip-render" class="headerlink" title="0x003 方法二：skip render"></a>0x003 方法二：skip render</h3><p>在博客根目录下的 <code>_config.yml</code>，找到 <code>skip_render</code>，大概在32行左右，写入你想要的跳过渲染的路径，注意缩进和空格。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 指定目录跳过hexo渲染</span>skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注释：<code>tools/*</code> 表示在目录 <code>source/fireworks</code> 下的文件全部跳过渲染，<code>tools/**</code> 表示在博客根目录 <code>source/tools/</code> 文件夹下的文件全部跳过渲染（例如页面的 js、css 在另一个文件夹中）。</p></blockquote><h3 id="0x004-案例：webstack-导航"><a href="#0x004-案例：webstack-导航" class="headerlink" title="0x004 案例：webstack 导航"></a>0x004 案例：webstack 导航</h3><p><code>webstack</code>是一个纯静态的网址导航网站，内容均由<code>viggo</code>收集并整理。项目基于<code>bootstrap</code>前端框架开发。</p><p><img src="https://camo.githubusercontent.com/41111c4c1d9922982f380566e6a2f8415204c52c/687474703a2f2f7777772e776562737461636b2e63632f6173736574732f696d616765732f707265766965772e676966" alt="image"></p><ul><li>Github：<a href="https://github.com/WebStackPage/WebStackPage.github.io">https://github.com/WebStackPage/WebStackPage.github.io</a></li></ul><p>在博客根目录 <code>source/</code>下新建<code>tools</code>，然后新建<code>index.html</code>,将<code>webstack</code>网页源码全选复制粘贴到里面。</p><ul><li>本站的webstack源码：<a href="view-source:http://luckyzmj.cn/tools/">view-source:http://luckyzmj.cn/tools/</a></li></ul><blockquote><p>注意：将源码里的部分信息以及跳转链接按照你真实个人博客的环境进行修改。</p></blockquote><p>然后打开博客根目录下配置文件<code>_config.yml</code>，找到<code>skip_render</code>，做如下修改：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">skip_render:  - <span class="token string">'tools/*'</span>  - <span class="token string">'tools/**'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>最后执行<code>hexo clean</code>和<code>hexo s -g </code>本地预览，检查无误后<code>hexo g -d</code>部署到服务器上即可。</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93">https://xiabor.com/2020/04/21/hexo3/#%E5%A6%82%E4%BD%95%E8%B7%B3%E8%BF%87hexo%E7%9A%84%E6%B8%B2%E6%9F%93</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="博客篇" scheme="http://fantasy06.github.io/categories/%E5%8D%9A%E5%AE%A2%E7%AF%87/"/>
    
    
    <category term="Hexo" scheme="http://fantasy06.github.io/tags/Hexo/"/>
    
    <category term="渲染绕过" scheme="http://fantasy06.github.io/tags/%E6%B8%B2%E6%9F%93%E7%BB%95%E8%BF%87/"/>
    
  </entry>
  
  <entry>
    <title>文字背景粒子特效</title>
    <link href="http://fantasy06.github.io/posts/4b3510a4.html"/>
    <id>http://fantasy06.github.io/posts/4b3510a4.html</id>
    <published>2020-03-26T16:00:00.000Z</published>
    <updated>2022-08-06T06:50:33.321Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>一款jQuery+CSS3的文字背景粒子动画特效，一共6种粒子效果，每种文字背景的粒子效果都不同，有漂浮的有坠落的等等。 </p><h3 id="0x001-特效演示"><a href="#0x001-特效演示" class="headerlink" title="0x001 特效演示"></a>0x001 特效演示</h3><hr><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"><span class="particletext fire" style="font-size:48px;position: relative;">This is fires</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext lines" style="font-size:48px; position: relative;">This is lines</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"><span class="particletext hearts" style="font-size:48px; position: relative;">This is hearts</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext bubbles" style="font-size:48px; position: relative;">This is bubbles</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext confetti" style="font-size:48px; position: relative;">This is confetti</span></div><div style="width: 100%;text-align: center; height: 120px; position: relative; bottom: 0px;"> <span class="particletext sunbeams" style="font-size:48px; position: relative;">This is sunbeams</span></div><style>.particletext {}.fire > .particle {  position: absolute;  background-color: rgba(255, 193, 7, 0.5);  border-radius: 40px;  border-top-right-radius: 0px;  -webkit-animation: fires 0.8s linear infinite;          animation: fires 0.8s linear infinite;  -webkit-transform: rotate(-45deg);          transform: rotate(-45deg);  opacity: 0;}/*css keyframes 动画*/@-webkit-keyframes fires {  0% {    -webkit-transform: rotate(-70deg) translateY(0%);            transform: rotate(-70deg) translateY(0%);  }  25% {    -webkit-transform: rotate(-20deg) translateY(-5%);            transform: rotate(-20deg) translateY(-5%);    opacity: 1;  }  50% {    -webkit-transform: rotate(-70deg) translateY(-10%);            transform: rotate(-70deg) translateY(-10%);  }  75% {    -webkit-transform: rotate(-20deg) translateY(-20%);            transform: rotate(-20deg) translateY(-20%);  }  100% {    -webkit-transform: rotate(-70deg) translateY(-40%);            transform: rotate(-70deg) translateY(-40%);    opacity: 1;  }}@keyframes fires {  0% {    -webkit-transform: rotate(-70deg) translateY(0%);            transform: rotate(-70deg) translateY(0%);  }  25% {    -webkit-transform: rotate(-20deg) translateY(-5%);            transform: rotate(-20deg) translateY(-5%);    opacity: 1;  }  50% {    -webkit-transform: rotate(-70deg) translateY(-10%);            transform: rotate(-70deg) translateY(-10%);  }  75% {    -webkit-transform: rotate(-20deg) translateY(-20%);            transform: rotate(-20deg) translateY(-20%);  }  100% {    -webkit-transform: rotate(-70deg) translateY(-40%);            transform: rotate(-70deg) translateY(-40%);    opacity: 1;  }}</style><script type="text/javascript" src="https://code.jquery.com/jquery-3.1.1.min.js"></script><script>function fire() {    $.each($(".particletext.fire"), function(){       var firecount = ($(this).width()/50)*20;       for(var i = 0; i <= firecount; i++) {          var size = $.rnd(8,12);          $(this).append('<span class="particle" style="top:' + $.rnd(40,70) + '%; left:' + $.rnd(-10,100) + '%;width:' + size + 'px; height:' + size + 'px;animation-delay: ' + ($.rnd(0,20)/10) + 's;"></span>');       }    }); } </script><style>.lines > .particle {  position: absolute;  background-color: rgba(244, 67, 54, 0.5);  -webkit-animation: lines 3s linear infinite;          animation: lines 3s linear infinite;}@-webkit-keyframes lines {  0%, 50%, 100% {    -webkit-transform: translateY(0%);            transform: translateY(0%);  }  25% {    -webkit-transform: translateY(100%);            transform: translateY(100%);  }  75% {    -webkit-transform: translateY(-100%);            transform: translateY(-100%);  }}@keyframes lines {  0%, 50%, 100% {    -webkit-transform: translateY(0%);            transform: translateY(0%);  }  25% {    -webkit-transform: translateY(100%);            transform: translateY(100%);  }  75% {    -webkit-transform: translateY(-100%);            transform: translateY(-100%);  }}</style><script>function lines() {    $.each($(".particletext.lines"), function(){       var linecount = ($(this).width()/50)*10;       for(var i = 0; i <= linecount; i++) {          $(this).append('<span class="particle" style="top:' + $.rnd(-30,30) + '%; left:' + $.rnd(-10,110) + '%;width:' + $.rnd(1,3) + 'px; height:' + $.rnd(20,80) + '%;animation-delay: -' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.hearts > .particle {  opacity: 0;  position: absolute;  background-color: #cc2a5d;  -webkit-animation: hearts 3s ease-in infinite;          animation: hearts 3s ease-in infinite;}.hearts > .particle:before,.hearts > .particle:after {  position: absolute;  content: '';  border-radius: 100px;  top: 0px;  left: 0px;  width: 100%;  height: 100%;  background-color: #cc2a5d;}.hearts > .particle:before {  -webkit-transform: translateX(-50%);          transform: translateX(-50%);}.hearts > .particle:after {  -webkit-transform: translateY(-50%);          transform: translateY(-50%);}@-webkit-keyframes hearts {  0% {    opacity: 0;    -webkit-transform: translate(0, 0%) rotate(45deg);            transform: translate(0, 0%) rotate(45deg);  }  20% {    opacity: 0.8;    -webkit-transform: translate(0, -20%) rotate(45deg);            transform: translate(0, -20%) rotate(45deg);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%) rotate(45deg);            transform: translate(0, -1000%) rotate(45deg);  }}@keyframes hearts {  0% {    opacity: 0;    -webkit-transform: translate(0, 0%) rotate(45deg);            transform: translate(0, 0%) rotate(45deg);  }  20% {    opacity: 0.8;    -webkit-transform: translate(0, -20%) rotate(45deg);            transform: translate(0, -20%) rotate(45deg);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%) rotate(45deg);            transform: translate(0, -1000%) rotate(45deg);  }}</style><script>function hearts() {    $.each($(".particletext.hearts"), function(){       var heartcount = ($(this).width()/50)*5;       for(var i = 0; i <= heartcount; i++) {          var size = ($.rnd(60,120)/10);          $(this).append('<span class="particle" style="top:' + $.rnd(20,80) + '%; left:' + $.rnd(0,95) + '%;width:' + size + 'px; height:' + size + 'px;animation-delay: ' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.bubbles > .particle {  opacity: 0;  position: absolute;  background-color: rgba(33, 150, 243, 0.5);  -webkit-animation: bubbles 3s ease-in infinite;          animation: bubbles 3s ease-in infinite;  border-radius: 100%;}@-webkit-keyframes bubbles {  0% {    opacity: 0;  }  20% {    opacity: 1;    -webkit-transform: translate(0, -20%);            transform: translate(0, -20%);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%);            transform: translate(0, -1000%);  }}@keyframes bubbles {  0% {    opacity: 0;  }  20% {    opacity: 1;    -webkit-transform: translate(0, -20%);            transform: translate(0, -20%);  }  100% {    opacity: 0;    -webkit-transform: translate(0, -1000%);            transform: translate(0, -1000%);  }}</style><script>function bubbles() {    $.each($(".particletext.bubbles"), function(){       var bubblecount = ($(this).width()/50)*10;       for(var i = 0; i <= bubblecount; i++) {          var size = ($.rnd(40,80)/10);          $(this).append('<span class="particle" style="top:' + $.rnd(20,80) + '%; left:' + $.rnd(0,95) + '%;width:' + size + 'px; height:' + size + 'px;animation-delay: ' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.confetti > .particle {  opacity: 0;  position: absolute;  -webkit-animation: confetti 3s ease-in infinite;          animation: confetti 3s ease-in infinite;}.confetti > .particle.c1 {  background-color: rgba(76, 175, 80, 0.5);}.confetti > .particle.c2 {  background-color: rgba(156, 39, 176, 0.5);}@-webkit-keyframes confetti {  0% {    opacity: 0;    -webkit-transform: translateY(0%) rotate(0deg);            transform: translateY(0%) rotate(0deg);  }  10% {    opacity: 1;  }  35% {    -webkit-transform: translateY(-800%) rotate(270deg);            transform: translateY(-800%) rotate(270deg);  }  80% {    opacity: 1;  }  100% {    opacity: 0;    -webkit-transform: translateY(2000%) rotate(1440deg);            transform: translateY(2000%) rotate(1440deg);  }}@keyframes confetti {  0% {    opacity: 0;    -webkit-transform: translateY(0%) rotate(0deg);            transform: translateY(0%) rotate(0deg);  }  10% {    opacity: 1;  }  35% {    -webkit-transform: translateY(-800%) rotate(270deg);            transform: translateY(-800%) rotate(270deg);  }  80% {    opacity: 1;  }  100% {    opacity: 0;    -webkit-transform: translateY(2000%) rotate(1440deg);            transform: translateY(2000%) rotate(1440deg);  }}</style><script>function confetti() {    $.each($(".particletext.confetti"), function(){       var confetticount = ($(this).width()/50)*10;       for(var i = 0; i <= confetticount; i++) {          $(this).append('<span class="particle c' + $.rnd(1,2) + '" style="top:' + $.rnd(10,50) + '%; left:' + $.rnd(0,100) + '%;width:' + $.rnd(6,8) + 'px; height:' + $.rnd(3,4) + 'px;animation-delay: ' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><style>.sunbeams > .particle {  position: absolute;  background-color: rgba(253, 216, 53, 0.5);  -webkit-animation: sunbeams 3s linear infinite;          animation: sunbeams 3s linear infinite;}@-webkit-keyframes sunbeams {  0% {    -webkit-transform: translateY(40%) rotate(0deg);            transform: translateY(40%) rotate(0deg);  }  50% {    -webkit-transform: translateY(-40%) rotate(180deg);            transform: translateY(-40%) rotate(180deg);  }  100% {    -webkit-transform: translateY(40%) rotate(360deg);            transform: translateY(40%) rotate(360deg);  }  0%,14%,17%,43%,53%,71%,80%,94%,100% {    opacity: 0;  }  6%,15%,24%,28%,48%,55%,78%,82%,99% {    opacity: 1;  }}@keyframes sunbeams {  0% {    -webkit-transform: translateY(40%) rotate(0deg);            transform: translateY(40%) rotate(0deg);  }  50% {    -webkit-transform: translateY(-40%) rotate(180deg);            transform: translateY(-40%) rotate(180deg);  }  100% {    -webkit-transform: translateY(40%) rotate(360deg);            transform: translateY(40%) rotate(360deg);  }  0%,14%,17%,43%,53%,71%,80%,94%,100% {    opacity: 0;  }  6%,15%,24%,28%,48%,55%,78%,82%,99% {    opacity: 1;  }}</style><script>function sunbeams() {    $.each($(".particletext.sunbeams"), function(){       var linecount = ($(this).width()/50)*10;       for(var i = 0; i <= linecount; i++) {          $(this).append('<span class="particle" style="top:' + $.rnd(-50,00) + '%; left:' + $.rnd(0,100) + '%;width:' + $.rnd(1,3) + 'px; height:' + $.rnd(80,160) + '%;animation-delay: -' + ($.rnd(0,30)/10) + 's;"></span>');       }    }); } </script><script type="text/javascript">  function initparticles() {       bubbles();       hearts();       lines();       confetti();       fire();       sunbeams();     }  jQuery.rnd = function(m,n) {      m = parseInt(m);      n = parseInt(n);      return Math.floor( Math.random() * (n - m + 1) ) + m;  }  initparticles();</script><h3 id="0x002-Fires-特效"><a href="#0x002-Fires-特效" class="headerlink" title="0x002 Fires 特效"></a>0x002 Fires 特效</h3><h4 id="1-JS-代码"><a href="#1-JS-代码" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.fire"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> firecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> firecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> size <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;"&gt;&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span><span class="token function-variable function">rnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">fire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CSS-代码"><a href="#2-CSS-代码" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;.fire &gt; .particle</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>255<span class="token punctuation">,</span> 193<span class="token punctuation">,</span> 7<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">border-top-right-radius</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> fires 0.8s linear infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> fires 0.8s linear infinite<span class="token punctuation">;</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> fires</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-5%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-5%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-10%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-10%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-20%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-20%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> fires</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-5%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-5%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-10%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-10%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-20%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-20deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-20%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span>-70deg<span class="token punctuation">)</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTML-代码"><a href="#3-HTML-代码" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>particletext fire<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is fires<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x003-Lines-特效"><a href="#0x003-Lines-特效" class="headerlink" title="0x003 Lines 特效"></a>0x003 Lines 特效</h3><h4 id="1-JS-代码-1"><a href="#1-JS-代码-1" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.lines"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> linecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> linecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;animation-delay: -'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;"&gt;&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span><span class="token function-variable function">rnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">lines</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CSS-代码-1"><a href="#2-CSS-代码-1" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;.lines &gt; .particle</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>244<span class="token punctuation">,</span> 67<span class="token punctuation">,</span> 54<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> lines 3s linear infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> lines 3s linear infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> lines</span> <span class="token punctuation">{</span>  <span class="token selector">0%, 50%, 100%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> lines</span> <span class="token punctuation">{</span>  <span class="token selector">0%, 50%, 100%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">25%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">75%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-100%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTML-代码-1"><a href="#3-HTML-代码-1" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>particletext lines<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is lines<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x004-Hearts-特效"><a href="#0x004-Hearts-特效" class="headerlink" title="0x004 Hearts 特效"></a>0x004 Hearts 特效</h3><h4 id="1-JS-代码-2"><a href="#1-JS-代码-2" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">hearts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.hearts"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> heartcount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> heartcount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;"&gt;&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span><span class="token function-variable function">rnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">hearts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CSS-代码-2"><a href="#2-CSS-代码-2" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;.hearts &gt; .particle</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #cc2a5d<span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> hearts 3s ease-in infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> hearts 3s ease-in infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hearts &gt; .particle:before, .hearts &gt; .particle:after</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #cc2a5d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hearts &gt; .particle:before</span> <span class="token punctuation">{</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.hearts &gt; .particle:after</span> <span class="token punctuation">{</span>  <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> hearts</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> hearts</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0.8<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>45deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTML-代码-2"><a href="#3-HTML-代码-2" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>particletext hearts<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is hearts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x005-Bubbles-特效"><a href="#0x005-Bubbles-特效" class="headerlink" title="0x005 Bubbles 特效"></a>0x005 Bubbles 特效</h3><h4 id="1-JS-代码-3"><a href="#1-JS-代码-3" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">bubbles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.bubbles"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> bubblecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> bubblecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">var</span> size <span class="token operator">=</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> size <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;"&gt;&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span><span class="token function-variable function">rnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">bubbles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CSS-代码-3"><a href="#2-CSS-代码-3" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;&lt;style&gt;.bubbles &gt; .particle</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>33<span class="token punctuation">,</span> 150<span class="token punctuation">,</span> 243<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> bubbles 3s ease-in infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> bubbles 3s ease-in infinite<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> bubbles</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> bubbles</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">20%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -20%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> -1000%<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTML-代码-3"><a href="#3-HTML-代码-3" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>particletext bubbles<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is bubbles<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x006-Confetti-特效"><a href="#0x006-Confetti-特效" class="headerlink" title="0x006 Confetti 特效"></a>0x006 Confetti 特效</h3><h4 id="1-JS-代码-4"><a href="#1-JS-代码-4" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.confetti"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> confetticount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> confetticount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle c'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px;animation-delay: '</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;"&gt;&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span><span class="token function-variable function">rnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">confetti</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CSS-代码-4"><a href="#2-CSS-代码-4" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;.confetti &gt; .particle</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> confetti 3s ease-in infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> confetti 3s ease-in infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.confetti &gt; .particle.c1</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>76<span class="token punctuation">,</span> 175<span class="token punctuation">,</span> 80<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.confetti &gt; .particle.c2</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>156<span class="token punctuation">,</span> 39<span class="token punctuation">,</span> 176<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> confetti</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">10%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">35%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-800%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-800%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">80%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>2000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>1440deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>2000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>1440deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> confetti</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>0%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">10%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">35%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-800%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-800%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>270deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">80%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>2000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>1440deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>2000%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>1440deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTML-代码-4"><a href="#3-HTML-代码-4" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>particletext confetti<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is confetti<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x007-Sunbeams-特效"><a href="#0x007-Sunbeams-特效" class="headerlink" title="0x007 Sunbeams 特效"></a>0x007 Sunbeams 特效</h3><h4 id="1-JS-代码-5"><a href="#1-JS-代码-5" class="headerlink" title="1. JS 代码"></a>1. JS 代码</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span><span class="token keyword">function</span> <span class="token function">sunbeams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    $<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".particletext.sunbeams"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">var</span> linecount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">width</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>       <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> linecount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">'&lt;span class="particle" style="top:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">00</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%; left:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;width:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'px; height:'</span> <span class="token operator">+</span> $<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">160</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'%;animation-delay: -'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">rnd</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'s;"&gt;&lt;/span&gt;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>   jQuery<span class="token punctuation">.</span><span class="token function-variable function">rnd</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span>n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      m <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">+</span> m<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">sunbeams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-CSS-代码-5"><a href="#2-CSS-代码-5" class="headerlink" title="2. CSS 代码"></a>2. CSS 代码</h4><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">&lt;style&gt;.sunbeams &gt; .particle</span> <span class="token punctuation">{</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>253<span class="token punctuation">,</span> 216<span class="token punctuation">,</span> 53<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">-webkit-animation</span><span class="token punctuation">:</span> sunbeams 3s linear infinite<span class="token punctuation">;</span>          <span class="token property">animation</span><span class="token punctuation">:</span> sunbeams 3s linear infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@-webkit-keyframes</span> sunbeams</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">0%,14%,17%,43%,53%,71%,80%,94%,100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">6%,15%,24%,28%,48%,55%,78%,82%,99%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> sunbeams</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>0deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">50%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>180deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span> <span class="token punctuation">{</span>    <span class="token property">-webkit-transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>40%<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>360deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">0%,14%,17%,43%,53%,71%,80%,94%,100%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">6%,15%,24%,28%,48%,55%,78%,82%,99%</span> <span class="token punctuation">{</span>    <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-HTML-代码-5"><a href="#3-HTML-代码-5" class="headerlink" title="3. HTML 代码"></a>3. HTML 代码</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span> <span class="token property">bottom</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>particletext sunbeams<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font-size</span><span class="token punctuation">:</span>48px<span class="token punctuation">;</span> <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is sunbeams<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla</summary>
      
    
    
    
    <category term="前端篇" scheme="http://fantasy06.github.io/categories/%E5%89%8D%E7%AB%AF%E7%AF%87/"/>
    
    
    <category term="jQuery+CSS3" scheme="http://fantasy06.github.io/tags/jQuery-CSS3/"/>
    
    <category term="粒子特效" scheme="http://fantasy06.github.io/tags/%E7%B2%92%E5%AD%90%E7%89%B9%E6%95%88/"/>
    
  </entry>
  
</feed>
